{
  "chunk-be11ff19951a5da380ec7c57e9d0f774": {
    "tokens": 1200,
    "content": "Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks \n\nPatrick Lewis†‡, Ethan Perez?, \n\nAleksandra Piktus†, Fabio Petroni†, Vladimir Karpukhin†, Naman Goyal†, Heinrich Küttler†, \n\nMike Lewis†, Wen-tau $\\mathbf { V i h } ^ { \\dagger }$ , Tim Rocktäschel†‡, Sebastian Riedel†‡, Douwe Kiela† \n\n†Facebook AI Research; ‡University College London; ?New York University; plewis@fb.com \n\nAbstract \n\nLarge pre-trained language models have been shown to store factual knowledge in their parameters, and achieve state-of-the-art results when fine-tuned on downstream NLP tasks. However, their ability to access and precisely manipulate knowledge is still limited, and hence on knowledge-intensive tasks, their performance lags behind task-specific architectures. Additionally, providing provenance for their decisions and updating their world knowledge remain open research problems. Pretrained models with a differentiable access mechanism to explicit non-parametric memory have so far been only investigated for extractive downstream tasks. We explore a general-purpose fine-tuning recipe for retrieval-augmented generation (RAG) — models which combine pre-trained parametric and non-parametric memory for language generation. We introduce RAG models where the parametric memory is a pre-trained seq2seq model and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We compare two RAG formulations, one which conditions on the same retrieved passages across the whole generated sequence, and another which can use different passages per token. We fine-tune and evaluate our models on a wide range of knowledgeintensive NLP tasks and set the state of the art on three open domain QA tasks, outperforming parametric seq2seq models and task-specific retrieve-and-extract architectures. For language generation tasks, we find that RAG models generate more specific, diverse and factual language than a state-of-the-art parametric-only seq2seq baseline. \n\n1 Introduction \n\nPre-trained neural language models have been shown to learn a substantial amount of in-depth knowledge from data [47]. They can do so without any access to an external memory, as a parameterized implicit knowledge base [51, 52]. While this development is exciting, such models do have downsides: They cannot easily expand or revise their memory, can’t straightforwardly provide insight into their predictions, and may produce “hallucinations” [38]. Hybrid models that combine parametric memory with non-parametric (i.e., retrieval-based) memories [20, 26, 48] can address some of these issues because knowledge can be directly revised and expanded, and accessed knowledge can be inspected and interpreted. REALM [20] and ORQA [31], two recently introduced models that combine masked language models [8] with a differentiable retriever, have shown promising results, but have only explored open-domain extractive question answering. Here, we bring hybrid parametric and non-parametric memory to the “workhorse of NLP,” i.e. sequence-to-sequence (seq2seq) models. \n\nWe endow pre-trained, parametric-memory generation models with a non-parametric memory through a general-purpose fine-tuning approach which we refer to as retrieval-augmented generation (RAG). We build RAG models where the parametric memory is a pre-trained seq2seq transformer, and the non-parametric memory is a dense vector index of Wikipedia, accessed with a pre-trained neural retriever. We combine these components in a probabilistic model trained end-to-end (Fig. 1). The retriever (Dense Passage Retriever [26], henceforth DPR) provides latent documents conditioned on the input, and the seq2seq model (BART [32]) then conditions on these latent documents together with the input to generate the output. We marginalize the latent documents with a top-K approximation, either on a per-output basis (assuming the same document is responsible for all tokens) or a per-token basis (where different documents are responsible for different tokens). Like T5 [51] or BART, RAG can be fine-tuned on any seq2seq task, whereby both the generator and retriever are jointly learned. \n\nThere has been extensive previous work proposing architectures to enrich systems with non-parametric memory which are trained from scratch for specific tasks, e.g. memory networks [64, 55], stackaugmented networks [25] and memory layers [30]. In contrast, we explore a setting where both parametric and non-parametric memory components are pre-trained and pre-loaded with extensive knowledge. Crucially, by using pre-trained access mechanisms, the ability to access knowledge is present without additional training. \n\nOur results highlight the benefits of combining parametric and non-parametric memory with generation for knowledge-intensive tasks—tasks that humans could not reasonably be expected to perform without access to an external knowledge source. Our RAG models achieve state-of-the-art results on open Natural Questions [29], WebQuestions [3] and CuratedTrec [2] and strongly outperform recent approaches that use specialised pre-training objectives on TriviaQA [24]. Despite these being extractive tasks, we find that unconstrained generation outperforms previous extractive approaches. For knowledge-intensive generation, we experiment with MS-MARCO [1] and Jeopardy question generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within $4 . 3 \\%$ of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models’ knowledge as the world changes.1 \n\n2 Methods \n\nWe explore RAG models, which use the input sequence $",
    "chunk_order_index": 0,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:0e2d3dce8989c844f9768fd000bd43fd",
      "default:extract:e8a0486c9ccc3b55bf8992847adaf5cc"
    ],
    "create_time": 1757866070,
    "update_time": 1757866102,
    "_id": "chunk-be11ff19951a5da380ec7c57e9d0f774"
  },
  "chunk-0c4d1e9cd488cf919d40a859d03c9295": {
    "tokens": 1200,
    "content": "generation, and we find that our models generate responses that are more factual, specific, and diverse than a BART baseline. For FEVER [56] fact verification, we achieve results within $4 . 3 \\%$ of state-of-the-art pipeline models which use strong retrieval supervision. Finally, we demonstrate that the non-parametric memory can be replaced to update the models’ knowledge as the world changes.1 \n\n2 Methods \n\nWe explore RAG models, which use the input sequence $x$ to retrieve text documents $z$ and use them as additional context when generating the target sequence $y$ . As shown in Figure 1, our models leverage two components: (i) a retriever $p _ { \\eta } ( z | x )$ with parameters $\\eta$ that returns (top-K truncated) distributions over text passages given a query $x$ and (ii) a generator $p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )$ parametrized by $\\theta$ that generates a current token based on a context of the previous $i - 1$ tokens $y _ { 1 : i - 1 }$ , the original input $x$ and a retrieved passage $z$ . \n\nTo train the retriever and generator end-to-end, we treat the retrieved document as a latent variable. We propose two models that marginalize over the latent documents in different ways to produce a distribution over generated text. In one approach, RAG-Sequence, the model uses the same document to predict each target token. The second approach, RAG-Token, can predict each target token based on a different document. In the following, we formally introduce both models and then describe the $p _ { \\eta }$ and $p _ { \\theta }$ components, as well as the training and decoding procedure. \n\n2.1 Models \n\nRAG-Sequence Model The RAG-Sequence model uses the same retrieved document to generate the complete sequence. Technically, it treats the retrieved document as a single latent variable that is marginalized to get the seq2seq probability $p ( y | x )$ via a top-K approximation. Concretely, the top $\\mathbf { K }$ documents are retrieved using the retriever, and the generator produces the output sequence probability for each document, which are then marginalized, \n\nRAG-Token Model In the RAG-Token model we can draw a different latent document for each target token and marginalize accordingly. This allows the generator to choose content from several documents when producing an answer. Concretely, the top K documents are retrieved using the retriever, and then the generator produces a distribution for the next output token for each document, before marginalizing, and repeating the process with the following output token, Formally, we define: \n\nFinally, we note that RAG can be used for sequence classification tasks by considering the target class as a target sequence of length one, in which case RAG-Sequence and RAG-Token are equivalent. \n\n2.2 Retriever: DPR \n\nThe retrieval component $p _ { \\eta } ( z | x )$ is based on DPR [26]. DPR follows a bi-encoder architecture: \n\nwhere $\\mathbf { d } ( z )$ is a dense representation of a document produced by a BERTBASE document encoder [8], and $\\mathbf { q } ( x )$ a query representation produced by a query encoder, also based on BERTBASE. Calculating top- $\\cdot \\mathbf { k } ( p _ { \\eta } ( \\cdot | x ) )$ , the list of $k$ documents $z$ with highest prior probability $p _ { \\eta } ( z | x )$ , is a Maximum Inner Product Search (MIPS) problem, which can be approximately solved in sub-linear time [23]. We use a pre-trained bi-encoder from DPR to initialize our retriever and to build the document index. This retriever was trained to retrieve documents which contain answers to TriviaQA [24] questions and Natural Questions [29]. We refer to the document index as the non-parametric memory. \n\n2.3 Generator: BART \n\nThe generator component $p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )$ could be modelled using any encoder-decoder. We use BART-large [32], a pre-trained seq2seq transformer [58] with 400M parameters. To combine the input $x$ with the retrieved content $z$ when generating from BART, we simply concatenate them. BART was pre-trained using a denoising objective and a variety of different noising functions. It has obtained state-of-the-art results on a diverse set of generation tasks and outperforms comparably-sized T5 models [32]. We refer to the BART generator parameters $\\theta$ as the parametric memory henceforth. \n\n2.4 Training \n\nWe jointly train the retriever and generator components without any direct supervision on what document should be retrieved. Given a fine-tuning training corpus of input/output pairs $( x _ { j } , y _ { j } )$ , we minimize the negative marginal log-likelihood of each target, $\\Sigma _ { j } - \\log p ( y _ { j } | x _ { j } )$ using stochastic gradient descent with Adam [28]. Updating the document encoder $\\mathrm { B E R T } _ { d }$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-t",
    "chunk_order_index": 1,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:11e350526170276b710c00fa5a80df85",
      "default:extract:2db735e66776f3aab25cc4a631013c92"
    ],
    "create_time": 1757866070,
    "update_time": 1757866091,
    "_id": "chunk-0c4d1e9cd488cf919d40a859d03c9295"
  },
  "chunk-2a058689f396f9948869181b4e35d86b": {
    "tokens": 1200,
    "content": ", $\\Sigma _ { j } - \\log p ( y _ { j } | x _ { j } )$ using stochastic gradient descent with Adam [28]. Updating the document encoder $\\mathrm { B E R T } _ { d }$ during training is costly as it requires the document index to be periodically updated as REALM does during pre-training [20]. We do not find this step necessary for strong performance, and keep the document encoder (and index) fixed, only fine-tuning the query encoder $\\mathsf { B E R T } _ { q }$ and the BART generator. \n\n2.5 Decoding \n\nAt test time, RAG-Sequence and RAG-Token require different ways to approximate arg $\\operatorname* { m a x } _ { y } p ( y | x )$ \n\nRAG-Token The RAG-Token model can be seen as a standard, autoregressive seq2seq generator with transition probability: $\\begin{array} { r } { p _ { \\theta } ^ { \\prime } ( y _ { i } | x , y _ { 1 : i - 1 } ) = \\sum _ { z \\in \\mathrm { t o p } \\cdot k ( p ( \\cdot | x ) ) } p _ { \\eta } ( z _ { i } | \\overline { { x } } ) p _ { \\theta } ( y _ { i } | x , \\widehat { z } _ { i } , \\chi _ { 1 : i - 1 } ^ { \\sim } ) } \\end{array}$ To decode, we can plug $p _ { \\theta } ^ { \\prime } ( y _ { i } | x , y _ { 1 : i - 1 } )$ into a standard beam decoder. \n\nRAG-Sequence For RAG-Sequence, the likelihood $p ( y | x )$ does not break into a conventional pertoken likelihood, hence we cannot solve it with a single beam search. Instead, we run beam search for each document $z$ , scoring each hypothesis using $p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )$ . This yields a set of hypotheses $Y$ , some of which may not have appeared in the beams of all documents. To estimate the probability of an hypothesis $y$ we run an additional forward pass for each document $z$ for which $y$ does not appear in the beam, multiply generator probability with $p _ { \\eta } ( z | x )$ and then sum the probabilities across beams for the marginals. We refer to this decoding procedure as “Thorough Decoding.” For longer output sequences, $| Y |$ can become large, requiring many forward passes. For more efficient decoding, we can make a further approximation that $\\dot { p } _ { \\theta } ( y | \\dot { x } , z _ { i } ) \\dot { \\approx } 0$ where $y$ was not generated during beam search from $x , z _ { i }$ . This avoids the need to run additional forward passes once the candidate set $Y$ has been generated. We refer to this decoding procedure as “Fast Decoding.” \n\n3 Experiments \n\nWe experiment with RAG in a wide range of knowledge-intensive tasks. For all experiments, we use a single Wikipedia dump for our non-parametric knowledge source. Following Lee et al. [31] and Karpukhin et al. [26], we use the December 2018 dump. Each Wikipedia article is split into disjoint 100-word chunks, to make a total of 21M documents. We use the document encoder to compute an embedding for each document, and build a single MIPS index using FAISS [23] with a Hierarchical Navigable Small World approximation for fast retrieval [37]. During training, we retrieve the top $k$ documents for each query. We consider $k \\in \\{ 5 , 1 0 \\}$ for training and set $k$ for test time using dev data. We now discuss experimental details for each task. \n\n3.1 Open-domain Question Answering \n\nOpen-domain question answering (QA) is an important real-world application and common testbed for knowledge-intensive tasks [20]. We treat questions and answers as input-output text pairs $( x , y )$ and train RAG by directly minimizing the negative log-likelihood of answers. We compare RAG to the popular extractive QA paradigm [5, 7, 31, 26], where answers are extracted spans from retrieved documents, relying primarily on non-parametric knowledge. We also compare to “Closed-Book QA” approaches [52], which, like RAG, generate answers, but which do not exploit retrieval, instead relying purely on parametric knowledge. We consider four popular open-domain QA datasets: Natural Questions (NQ) [29], TriviaQA (TQA) [24]. WebQuestions (WQ) [3] and CuratedTrec (CT) [2]. As CT and WQ are small, we follow DPR [26] by initializing CT and WQ models with our NQ RAG model. We use the same train/dev/test splits as prior work [31, 26] and report Exact Match (EM) scores. For TQA, to compare with T5 [52], we also evaluate on the TQA Wiki test set. \n\n3.2 Abstractive Question Answering \n\nRAG models can go beyond simple extractive QA and answer questions with free-form, abstractive text generation. To test RAG’s natural language generation (NLG) in a knowledge-intensive setting, we",
    "chunk_order_index": 2,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:8db5f6ecbc66a5135da7c902868e3e0a",
      "default:extract:95f4031bca4f1d19904e945d23c22163"
    ],
    "create_time": 1757866070,
    "update_time": 1757866092,
    "_id": "chunk-2a058689f396f9948869181b4e35d86b"
  },
  "chunk-9b9de140312f67e7f2d6598149a691f8": {
    "tokens": 1200,
    "content": "use the same train/dev/test splits as prior work [31, 26] and report Exact Match (EM) scores. For TQA, to compare with T5 [52], we also evaluate on the TQA Wiki test set. \n\n3.2 Abstractive Question Answering \n\nRAG models can go beyond simple extractive QA and answer questions with free-form, abstractive text generation. To test RAG’s natural language generation (NLG) in a knowledge-intensive setting, we use the MSMARCO NLG task v2.1 [43]. The task consists of questions, ten gold passages retrieved from a search engine for each question, and a full sentence answer annotated from the retrieved passages. We do not use the supplied passages, only the questions and answers, to treat \n\nMSMARCO as an open-domain abstractive QA task. MSMARCO has some questions that cannot be answered in a way that matches the reference answer without access to the gold passages, such as “What is the weather in Volcano, CA?” so performance will be lower without using gold passages. We also note that some MSMARCO questions cannot be answered using Wikipedia alone. Here, RAG can rely on parametric knowledge to generate reasonable responses. \n\n3.3 Jeopardy Question Generation \n\nTo evaluate RAG’s generation abilities in a non-QA setting, we study open-domain question generation. Rather than use questions from standard open-domain QA tasks, which typically consist of short, simple questions, we propose the more demanding task of generating Jeopardy questions. Jeopardy is an unusual format that consists of trying to guess an entity from a fact about that entity. For example, “The World Cup” is the answer to the question “In 1986 Mexico scored as the first country to host this international sports competition twice.” As Jeopardy questions are precise, factual statements, generating Jeopardy questions conditioned on their answer entities constitutes a challenging knowledge-intensive generation task. \n\nWe use the splits from SearchQA [10], with 100K train, 14K dev, and 27K test examples. As this is a new task, we train a BART model for comparison. Following [67], we evaluate using the SQuAD-tuned Q-BLEU-1 metric [42]. Q-BLEU is a variant of BLEU with a higher weight for matching entities and has higher correlation with human judgment for question generation than standard metrics. We also perform two human evaluations, one to assess generation factuality, and one for specificity. We define factuality as whether a statement can be corroborated by trusted external sources, and specificity as high mutual dependence between the input and output [33]. We follow best practice and use pairwise comparative evaluation [34]. Evaluators are shown an answer and two generated questions, one from BART and one from RAG. They are then asked to pick one of four options—quuestion A is better, question B is better, both are good, or neither is good. \n\n3.4 Fact Verification \n\nFEVER [56] requires classifying whether a natural language claim is supported or refuted by Wikipedia, or whether there is not enough information to decide. The task requires retrieving evidence from Wikipedia relating to the claim and then reasoning over this evidence to classify whether the claim is true, false, or unverifiable from Wikipedia alone. FEVER is a retrieval problem coupled with an challenging entailment reasoning task. It also provides an appropriate testbed for exploring the RAG models’ ability to handle classification rather than generation. We map FEVER class labels (supports, refutes, or not enough info) to single output tokens and directly train with claim-class pairs. Crucially, unlike most other approaches to FEVER, we do not use supervision on retrieved evidence. In many real-world applications, retrieval supervision signals aren’t available, and models that do not require such supervision will be applicable to a wider range of tasks. We explore two variants: the standard 3-way classification task (supports/refutes/not enough info) and the 2-way (supports/refutes) task studied in Thorne and Vlachos [57]. In both cases we report label accuracy. \n\n4 Results \n\n4.1 Open-domain Question Answering \n\nTable 1 shows results for RAG along with state-of-the-art models. On all four open-domain QA tasks, RAG sets a new state of the art (only on the T5-comparable split for TQA). RAG combines the generation flexibility of the “closed-book” (parametric only) approaches and the performance of \"open-book\" retrieval-based approaches. Unlike REALM and $\\mathrm { T } 5 { + } \\mathrm { S S M }$ , RAG enjoys strong results without expensive, specialized “salient span masking” pre-training [20]. It is worth noting that RAG’s retriever is initialized using DPR’s retriever, which uses retrieval supervision on Natural Questions and TriviaQA. RAG compares favourably to the DPR QA system, which uses a BERT-based “crossencoder” to re-rank documents, along with an extractive reader. RAG demonstrates that neither a re-ranker nor extractive reader is necessary for state-of-the-art performance. \n\nThere are several advantages to generating answers even when it is possible to extract them. Documents with clues about the answer but do not contain the answer verbatim can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading to more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving $1 1 . 8 \\%$ accuracy in such cases for NQ, where an extractive model would score $0 \\%$ . \n\n4.2 Abstractive Question Answering \n\nAs shown in Table 2, R",
    "chunk_order_index": 3,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:0c7475bd71624a36d657ec33628e8ee2",
      "default:extract:fbcb74d285be9086631e7cb238bba831"
    ],
    "create_time": 1757866070,
    "update_time": 1757866092,
    "_id": "chunk-9b9de140312f67e7f2d6598149a691f8"
  },
  "chunk-d3fd620aa30bf6560c0452e3e22a5b82": {
    "tokens": 1200,
    "content": "can still contribute towards a correct answer being generated, which is not possible with standard extractive approaches, leading to more effective marginalization over documents. Furthermore, RAG can generate correct answers even when the correct answer is not in any retrieved document, achieving $1 1 . 8 \\%$ accuracy in such cases for NQ, where an extractive model would score $0 \\%$ . \n\n4.2 Abstractive Question Answering \n\nAs shown in Table 2, RAG-Sequence outperforms BART on Open MS-MARCO NLG by 2.6 Bleu points and 2.6 Rouge-L points. RAG approaches state-of-the-art model performance, which is impressive given that (i) those models access gold passages with specific information required to generate the reference answer , (ii) many questions are unanswerable without the gold passages, and (iii) not all questions are answerable from Wikipedia alone. Table 3 shows some generated answers from our models. Qualitatively, we find that RAG models hallucinate less and generate factually correct text more often than BART. Later, we also show that RAG generations are more diverse than BART generations (see $\\ S 4 . 5 )$ ). \n\n4.3 Jeopardy Question Generation \n\nTable 2 shows that RAG-Token performs better than RAG-Sequence on Jeopardy question generation, with both models outperforming BART on Q-BLEU-1. 4 shows human evaluation results, over 452 pairs of generations from BART and RAG-Token. Evaluators indicated that BART was more factual than RAG in only $7 . 1 \\%$ of cases, while RAG was more factual in $4 2 . 7 \\%$ of cases, and both RAG and BART were factual in a further $17 \\%$ of cases, clearly demonstrating the effectiveness of RAG on the task over a state-of-the-art generation model. Evaluators also find RAG generations to be more specific by a large margin. Table 3 shows typical generations from each model. \n\nJeopardy questions often contain two separate pieces of information, and RAG-Token may perform best because it can generate responses that combine content from several documents. Figure 2 shows an example. When generating “Sun”, the posterior is high for document 2 which mentions “The Sun Also Rises”. Similarly, document 1 dominates the posterior when “A Farewell to Arms” is generated. Intriguingly, after the first token of each book is generated, the document posterior flattens. This observation suggests that the generator can complete the titles without depending on specific documents. In other words, the model’s parametric knowledge is sufficient to complete the titles. We find evidence for this hypothesis by feeding the BART-only baseline with the partial decoding \"The Sun. BART completes the generation \"The Sun Also Rises\" is a novel by this author of \"The Sun Also Rises\" indicating the title \"The Sun Also Rises\" is stored in BART’s parameters. Similarly, BART will complete the partial decoding \"The Sun Also Rises\" is a novel by this author of \"A with \"The Sun Also Rises\" is a novel by this author of \"A Farewell to Arms\". This example shows how parametric and non-parametric memories work together—the non-parametric component helps to guide the generation, drawing out specific knowledge stored in the parametric memory. \n\n4.4 Fact Verification \n\nTable 2 shows our results on FEVER. For 3-way classification, RAG scores are within $4 . 3 \\%$ of state-of-the-art models, which are complex pipeline systems with domain-specific architectures and substantial engineering, trained using intermediate retrieval supervision, which RAG does not require. \n\nDocument 1: his works are considered classics of American literature ... His wartime experiences formed the basis for his novel ”A Farewell to Arms” (1929) ... \n\nDocument 2: ... artists of the 1920s ”Lost Generation” expatriate community. His debut novel, ”The Sun Also Rises”, was published in 1926. \n\nFor 2-way classification, we compare against Thorne and Vlachos [57], who train RoBERTa [35] to classify the claim as true or false given the gold evidence sentence. RAG achieves an accuracy within $2 . 7 \\%$ of this model, despite being supplied with only the claim and retrieving its own evidence. We also analyze whether documents retrieved by RAG correspond to documents annotated as gold evidence in FEVER. We calculate the overlap in article titles between the top $k$ documents retrieved by RAG and gold evidence annotations. We find that the top retrieved document is from a gold article in $71 \\%$ of cases, and a gold article is present in the top 10 retrieved articles in $90 \\%$ of cases. \n\n4.5 Additional Results \n\nGeneration Diversity Section 4.3 shows that RAG models are more factual and specific than BART for Jeopardy question generation. Following recent work on diversity-promoting decoding [33, 59, 39], we also investigate generation diversity by calculating the ratio of distinct ngrams to total ngrams generated by different models. Table 5 shows that RAG-Sequence’s generations are more diverse than RAG-Token’s, and both are significantly more diverse than BART without needing any diversity-promoting decoding. \n\nRetrieval Ablations A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks. \n\nWe compare RAG’s dense retriever to",
    "chunk_order_index": 4,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:181189492b87410eed203f68d2f02e57",
      "default:extract:e25124d3feb9561af5387f2bd09fa395"
    ],
    "create_time": 1757866070,
    "update_time": 1757866107,
    "_id": "chunk-d3fd620aa30bf6560c0452e3e22a5b82"
  },
  "chunk-e08c0b053c99ea6a92ea4f3beba5f921": {
    "tokens": 1200,
    "content": "AG-Sequence’s generations are more diverse than RAG-Token’s, and both are significantly more diverse than BART without needing any diversity-promoting decoding. \n\nRetrieval Ablations A key feature of RAG is learning to retrieve relevant information for the task. To assess the effectiveness of the retrieval mechanism, we run ablations where we freeze the retriever during training. As shown in Table 6, learned retrieval improves results for all tasks. \n\nWe compare RAG’s dense retriever to a word overlap-based BM25 retriever [53]. Here, we replace RAG’s retriever with a fixed BM25 system, and use BM25 retrieval scores as logits when calculating $p ( z | x )$ . Table 6 shows the results. For FEVER, BM25 performs best, perhaps since FEVER claims are heavily entity-centric and thus well-suited for word overlap-based retrieval. Differentiable retrieval improves results on all other tasks, especially for Open-Domain QA, where it is crucial. \n\nIndex hot-swapping An advantage of non-parametric memory models like RAG is that knowledge can be easily updated at test time. Parametric-only models like T5 or BART need further training to update their behavior as the world changes. To demonstrate, we build an index using the DrQA [5] Wikipedia dump from December 2016 and compare outputs from RAG using this index to the newer index from our main results (December 2018). We prepare a list of 82 world leaders who had changed between these dates and use a template “Who is {position}?” (e.g. “Who is the President of Peru?”) to query our NQ RAG model with each index. RAG answers $70 \\%$ correctly using the 2016 index for 2016 world leaders and $68 \\%$ using the 2018 index for 2018 world leaders. Accuracy with mismatched indices is low $12 \\%$ with the 2018 index and 2016 leaders, $4 \\%$ with the 2016 index and 2018 leaders). This shows we can update RAG’s world knowledge by simply replacing its non-parametric memory. \n\nEffect of Retrieving more documents Models are trained with either 5 or 10 retrieved latent documents, and we do not observe significant differences in performance between them. We have the flexibility to adjust the number of retrieved documents at test time, which can affect performance and runtime. Figure 3 (left) shows that retrieving more documents at test time monotonically improves Open-domain QA results for RAG-Sequence, but performance peaks for RAG-Token at 10 retrieved documents. Figure 3 (right) shows that retrieving more documents leads to higher Rouge-L for RAG-Token at the expense of Bleu-1, but the effect is less pronounced for RAG-Sequence. \n\n5 Related Work \n\nSingle-Task Retrieval Prior work has shown that retrieval improves performance across a variety of NLP tasks when considered in isolation. Such tasks include open-domain question answering [5, 29], fact checking [56], fact completion [48], long-form question answering [12], Wikipedia article generation [36], dialogue [41, 65, 9, 13], translation [17], and language modeling [19, 27]. Our work unifies previous successes in incorporating retrieval into individual tasks, showing that a single retrieval-based architecture is capable of achieving strong performance across several tasks. \n\nGeneral-Purpose Architectures for NLP Prior work on general-purpose architectures for NLP tasks has shown great success without the use of retrieval. A single, pre-trained language model has been shown to achieve strong performance on various classification tasks in the GLUE benchmarks [60, 61] after fine-tuning [49, 8]. GPT-2 [50] later showed that a single, left-to-right, pre-trained language model could achieve strong performance across both discriminative and generative tasks. For further improvement, BART [32] and T5 [51, 52] propose a single, pre-trained encoder-decoder model that leverages bi-directional attention to achieve stronger performance on discriminative and generative tasks. Our work aims to expand the space of possible tasks with a single, unified architecture, by learning a retrieval module to augment pre-trained, generative language models. \n\nLearned Retrieval There is significant work on learning to retrieve documents in information retrieval, more recently with pre-trained, neural language models [44, 26] similar to ours. Some work optimizes the retrieval module to aid in a specific, downstream task such as question answering, using search [46], reinforcement learning [6, 63, 62], or a latent variable approach [31, 20] as in our work. These successes leverage different retrieval-based architectures and optimization techniques to achieve strong performance on a single task, while we show that a single retrieval-based architecture can be fine-tuned for strong performance on a variety of tasks. \n\nMemory-based Architectures Our document index can be seen as a large external memory for neural networks to attend to, analogous to memory networks [64, 55]. Concurrent work [14] learns to retrieve a trained embedding for each entity in the input, rather than to retrieve raw text as in our work. Other work improves the ability of dialog models to generate factual text by attending over fact embeddings [15, 13]. A key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model’s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9]. \n\nRetrieve",
    "chunk_order_index": 5,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:81bfc5685ee3943c1a6d66598b0fc846",
      "default:extract:2f82ffe571ca826112deb7318bfa9323"
    ],
    "create_time": 1757866070,
    "update_time": 1757866111,
    "_id": "chunk-e08c0b053c99ea6a92ea4f3beba5f921"
  },
  "chunk-5f2c9353b0b8313cea8dd93521358493": {
    "tokens": 1200,
    "content": "key feature of our memory is that it is comprised of raw text rather distributed representations, which makes the memory both (i) human-readable, lending a form of interpretability to our model, and (ii) human-writable, enabling us to dynamically update the model’s memory by editing the document index. This approach has also been used in knowledge-intensive dialog, where generators have been conditioned on retrieved text directly, albeit obtained via TF-IDF rather than end-to-end learnt retrieval [9]. \n\nRetrieve-and-Edit approaches Our method shares some similarities with retrieve-and-edit style approaches, where a similar training input-output pair is retrieved for a given input, and then edited to provide a final output. These approaches have proved successful in a number of domains including Machine Translation [18, 22] and Semantic Parsing [21]. Our approach does have several differences, including less of emphasis on lightly editing a retrieved item, but on aggregating content from several pieces of retrieved content, as well as learning latent retrieval, and retrieving evidence documents rather than related training pairs. This said, RAG techniques may work well in these settings, and could represent promising future work. \n\n6 Discussion \n\nIn this work, we presented hybrid generation models with access to parametric and non-parametric memory. We showed that our RAG models obtain state of the art results on open-domain QA. We found that people prefer RAG’s generation over purely parametric BART, finding RAG more factual and specific. We conducted an thorough investigation of the learned retrieval component, validating its effectiveness, and we illustrated how the retrieval index can be hot-swapped to update the model without requiring any retraining. In future work, it may be fruitful to investigate if the two components can be jointly pre-trained from scratch, either with a denoising objective similar to BART or some another objective. Our work opens up new research directions on how parametric and non-parametric memories interact and how to most effectively combine them, showing promise in being applied to a wide variety of NLP tasks. \n\nBroader Impact \n\nThis work offers several positive societal benefits over previous work: the fact that it is more strongly grounded in real factual knowledge (in this case Wikipedia) makes it “hallucinate” less with generations that are more factual, and offers more control and interpretability. RAG could be employed in a wide variety of scenarios with direct benefit to society, for example by endowing it with a medical index and asking it open-domain questions on that topic, or by helping people be more effective at their jobs. \n\nWith these advantages also come potential downsides: Wikipedia, or any potential external knowledge source, will probably never be entirely factual and completely devoid of bias. Since RAG can be employed as a language model, similar concerns as for GPT-2 [50] are valid here, although arguably to a lesser extent, including that it might be used to generate abuse, faked or misleading content in the news or on social media; to impersonate others; or to automate the production of spam/phishing content [54]. Advanced language models may also lead to the automation of various jobs in the coming decades [16]. In order to mitigate these risks, AI systems could be employed to fight against misleading content and automated spam/phishing. \n\nAcknowledgments \n\nThe authors would like to thank the reviewers for their thoughtful and constructive feedback on this paper, as well as HuggingFace for their help in open-sourcing code to run RAG models. The authors would also like to thank Kyunghyun Cho and Sewon Min for productive discussions and advice. EP thanks supports from the NSF Graduate Research Fellowship. PL is supported by the FAIR PhD program. \n\nReferences \n\n[1] Payal Bajaj, Daniel Campos, Nick Craswell, Li Deng, Jianfeng Gao, Xiaodong Liu, Rangan Majumder, Andrew McNamara, Bhaskar Mitra, Tri Nguyen, Mir Rosenberg, Xia Song, Alina Stoica, Saurabh Tiwary, and Tong Wang. MS MARCO: A Human Generated MAchine Reading COmprehension Dataset. arXiv:1611.09268 [cs], November 2016. URL http: //arxiv.org/abs/1611.09268. arXiv: 1611.09268.   \n[2] Petr Baudiš and Jan Šedivy. Modeling of the question answering task in the yodaqa system. In \\` International Conference of the Cross-Language Evaluation Forum for European Languages, pages 222–228. Springer, 2015. URL https://link.springer.com/chapter/10.1007% 2F978-3-319-24027-5_20.   \n[3] Jonathan Berant, Andrew Chou, Roy Frostig, and Percy Liang. Semantic Parsing on Freebase from Question-Answer Pairs. In Proceedings of the 2013 Conference on Empirical Methods in Natural Language Processing, pages 1533–1544, Seattle, Washington, USA, October 2013. Association for Computational Linguistics. URL http://www.aclweb.org/anthology/ D13-1160.   \n[4] Bin Bi, Chenliang Li, Chen Wu, Ming Yan, and Wei Wang. Palm: Pre-training an autoencoding&autoregressive language model for context-conditioned generation. ArXiv, abs/2004.07159, 2020. URL https://arxiv.org/abs/2004.07159.   \n[5] Danqi Chen, Adam Fisch, Jason Weston, and Antoine Bordes. Reading Wikipedia to Answer Open-Domain Questions. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1870–1879, Vancouver, Canada, July 2017. Association for Computational Linguistics",
    "chunk_order_index": 6,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:10062d10b08e5a4b93c2ea956c58c035",
      "default:extract:9df7edd022673c19389809159ef8aaa8"
    ],
    "create_time": 1757866070,
    "update_time": 1757866105,
    "_id": "chunk-5f2c9353b0b8313cea8dd93521358493"
  },
  "chunk-23a7f06b95f84637f32c50a9f98890ad": {
    "tokens": 1200,
    "content": "/2004.07159, 2020. URL https://arxiv.org/abs/2004.07159.   \n[5] Danqi Chen, Adam Fisch, Jason Weston, and Antoine Bordes. Reading Wikipedia to Answer Open-Domain Questions. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1870–1879, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1171. URL https://www.aclweb.org/anthology/P17-1171.   \n[6] Eunsol Choi, Daniel Hewlett, Jakob Uszkoreit, Illia Polosukhin, Alexandre Lacoste, and Jonathan Berant. Coarse-to-fine question answering for long documents. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 209–220, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1020. URL https://www.aclweb.org/anthology/P17-1020. \n\n[7] Christopher Clark and Matt Gardner. Simple and Effective Multi-Paragraph Reading Comprehension. arXiv:1710.10723 [cs], October 2017. URL http://arxiv.org/abs/1710.10723. arXiv: 1710.10723. \n\n[8] Jacob Devlin, Ming-Wei Chang, Kenton Lee, and Kristina Toutanova. BERT: Pre-training of Deep Bidirectional Transformers for Language Understanding. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long and Short Papers), pages 4171–4186, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-1423. URL https://www.aclweb.org/anthology/N19-1423. \n\n[9] Emily Dinan, Stephen Roller, Kurt Shuster, Angela Fan, Michael Auli, and Jason Weston. Wizard of wikipedia: Knowledge-powered conversational agents. In International Conference on Learning Representations, 2019. URL https://openreview.net/forum?id $\\underset { . } { = }$ r1l73iRqKm. \n\n[10] Matthew Dunn, Levent Sagun, Mike Higgins, V. Ugur Guney, Volkan Cirik, and Kyunghyun Cho. SearchQA: A New Q&A Dataset Augmented with Context from a Search Engine. arXiv:1704.05179 [cs], April 2017. URL http://arxiv.org/abs/1704.05179. arXiv: 1704.05179. \n\n[11] Angela Fan, Mike Lewis, and Yann Dauphin. Hierarchical neural story generation. In Proceedings of the 56th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 889–898, Melbourne, Australia, July 2018. Association for Computational Linguistics. doi: 10.18653/v1/P18-1082. URL https://www.aclweb.org/anthology/ P18-1082. \n\n[12] Angela Fan, Yacine Jernite, Ethan Perez, David Grangier, Jason Weston, and Michael Auli. ELI5: Long form question answering. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3558–3567, Florence, Italy, July 2019. Association for Computational Linguistics. doi: 10.18653/v1/P19-1346. URL https://www.aclweb.org/ anthology/P19-1346. \n\n[13] Angela Fan, Claire Gardent, Chloe Braud, and Antoine Bordes. Augmenting transformers with KNN-based composite memory, 2020. URL https://openreview.net/forum?id= H1gx1CNKPH. \n\n[14] Thibault Févry, Livio Baldini Soares, Nicholas FitzGerald, Eunsol Choi, and Tom Kwiatkowski. Entities as experts: Sparse memory access with entity supervision. ArXiv, abs/2004.07202, 2020. URL https://arxiv.org/abs/2004.07202. \n\n[15] Marjan Ghazvininejad, Chris Brockett, Ming-Wei Chang, Bill Dolan, Jianfeng Gao, Wen tau Yih, and Michel Galley. A knowledge-grounded neural conversation model. In AAAI Conference on Artificial Intelligence, 2018. URL https://www.aaai.org/ocs/index.php/ AAAI/AAAI18/paper/view/16710. \n\n[16] Katja Grace, John Salvatier, Allan Dafoe, Baobao Zhang, and Owain Evans. When will AI exceed human performance? evidence from AI experts. CoRR, abs/1705.08807, 2017. URL http://arxiv.org/abs/1705.08807. \n\n[17] Jiatao Gu, Yong Wang, Kyunghyun Cho, and Victor O.K. Li. Search engine guided neural machine translation. In AAAI Conference on Artificial Intelligence, 2018. URL https: //www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17282. \n\n[18] Jiatao Gu, Yong Wang, Kyunghyun Cho, and Victor O.K",
    "chunk_order_index": 7,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:386a1631799168c2ab7d9e73efee62cb",
      "default:extract:99f9ff2913d512f97d7b98f3aeb8b959"
    ],
    "create_time": 1757866070,
    "update_time": 1757866127,
    "_id": "chunk-23a7f06b95f84637f32c50a9f98890ad"
  },
  "chunk-ef47fd07a7377b94f11ee0a4348cf1b1": {
    "tokens": 1200,
    "content": "/1705.08807. \n\n[17] Jiatao Gu, Yong Wang, Kyunghyun Cho, and Victor O.K. Li. Search engine guided neural machine translation. In AAAI Conference on Artificial Intelligence, 2018. URL https: //www.aaai.org/ocs/index.php/AAAI/AAAI18/paper/view/17282. \n\n[18] Jiatao Gu, Yong Wang, Kyunghyun Cho, and Victor O.K. Li. Search engine guided neural machine translation. In 32nd AAAI Conference on Artificial Intelligence, AAAI 2018, 32nd AAAI Conference on Artificial Intelligence, AAAI 2018, pages 5133–5140. AAAI press, 2018. 32nd AAAI Conference on Artificial Intelligence, AAAI 2018 ; Conference date: 02-02-2018 Through 07-02-2018. \n\n[19] Kelvin Guu, Tatsunori B. Hashimoto, Yonatan Oren, and Percy Liang. Generating sentences by editing prototypes. Transactions of the Association for Computational Linguistics, 6:437–450, 2018. doi: 10.1162/tacl_a_00030. URL https://www.aclweb.org/anthology/Q18-1031. \n\n[20] Kelvin Guu, Kenton Lee, Zora Tung, Panupong Pasupat, and Ming-Wei Chang. REALM: Retrieval-augmented language model pre-training. ArXiv, abs/2002.08909, 2020. URL https: //arxiv.org/abs/2002.08909. \n\n[21] Tatsunori B Hashimoto, Kelvin Guu, Yonatan Oren, and Percy S Liang. A retrieve-and-edit framework for predicting structured outputs. In S. Bengio, H. Wallach, H. Larochelle, K. Grauman, N. Cesa-Bianchi, and R. Garnett, editors, Advances in Neural Information Processing Systems 31, pages 10052– 10062. Curran Associates, Inc., 2018. URL http://papers.nips.cc/paper/ 8209-a-retrieve-and-edit-framework-for-predicting-structured-outputs. pdf. \n\n[22] Nabil Hossain, Marjan Ghazvininejad, and Luke Zettlemoyer. Simple and effective retrieveedit-rerank text generation. In Proceedings of the 58th Annual Meeting of the Association for Computational Linguistics, pages 2532–2538, Online, July 2020. Association for Computational Linguistics. doi: 10.18653/v1/2020.acl-main.228. URL https://www.aclweb.org/ anthology/2020.acl-main.228. \n\n[23] Jeff Johnson, Matthijs Douze, and Hervé Jégou. Billion-scale similarity search with gpus. arXiv preprint arXiv:1702.08734, 2017. URL https://arxiv.org/abs/1702.08734. \n\n[24] Mandar Joshi, Eunsol Choi, Daniel Weld, and Luke Zettlemoyer. TriviaQA: A Large Scale Distantly Supervised Challenge Dataset for Reading Comprehension. In Proceedings of the 55th Annual Meeting of the Association for Computational Linguistics (Volume 1: Long Papers), pages 1601–1611, Vancouver, Canada, July 2017. Association for Computational Linguistics. doi: 10.18653/v1/P17-1147. URL https://www.aclweb.org/anthology/P17-1147. \n\n[25] Armand Joulin and Tomas Mikolov. Inferring algorithmic patterns with stackaugmented recurrent nets. In Proceedings of the 28th International Conference on Neural Information Processing Systems - Volume 1, NIPS’15, page 190–198, Cambridge, MA, USA, 2015. MIT Press. URL https://papers.nips.cc/paper/ 5857-inferring-algorithmic-patterns-with-stack-augmented-recurrent-nets. \n\n[26] Vladimir Karpukhin, Barlas Oguz, Sewon Min, Ledell Wu, Sergey Edunov, Danqi Chen, and Wen-tau Yih. Dense passage retrieval for open-domain question answering. arXiv preprint arXiv:2004.04906, 2020. URL https://arxiv.org/abs/2004.04906. \n\n[27] Urvashi Khandelwal, Omer Levy, Dan Jurafsky, Luke Zettlemoyer, and Mike Lewis. Generalization through memorization: Nearest neighbor language models. In International Conference on Learning Representations, 2020. URL https://openreview.net/forum?id $\\ c =$ HklBjCEKvH. \n\n[28] Diederik P. Kingma and Jimmy Ba. Adam: A method for stochastic optimization. In Yoshua Bengio and Yann LeCun, editors, 3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings, 2015. URL http://arxiv.org/abs/1412.6980. \n\n[29] Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Matthew Kelcey, Jacob Devlin, Kenton Lee, Kristina N. Toutanova, Llion Jones, Ming-Wei Chang, Andrew Dai, Jakob Uszkore",
    "chunk_order_index": 8,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:b652299a34798a3ac922e16e5a50c71a",
      "default:extract:c684e60c02456c9d9acbec6824ddfd0e"
    ],
    "create_time": 1757866070,
    "update_time": 1757866127,
    "_id": "chunk-ef47fd07a7377b94f11ee0a4348cf1b1"
  },
  "chunk-6b046b3a3d5c9333bae80b4874d68e8a": {
    "tokens": 1200,
    "content": "Proceedings, 2015. URL http://arxiv.org/abs/1412.6980. \n\n[29] Tom Kwiatkowski, Jennimaria Palomaki, Olivia Redfield, Michael Collins, Ankur Parikh, Chris Alberti, Danielle Epstein, Illia Polosukhin, Matthew Kelcey, Jacob Devlin, Kenton Lee, Kristina N. Toutanova, Llion Jones, Ming-Wei Chang, Andrew Dai, Jakob Uszkoreit, Quoc Le, and Slav Petrov. Natural Questions: a Benchmark for Question Answering Research. Transactions of the Association of Computational Linguistics, 2019. URL https://tomkwiat.users.x20web.corp.google.com/papers/ natural-questions/main-1455-kwiatkowski.pdf. \n\n[30] Guillaume Lample, Alexandre Sablayrolles, Marc’ Aurelio Ranzato, Ludovic Denoyer, and Herve Jegou. Large memory layers with product keys. In H. Wallach, H. Larochelle, A. Beygelzimer, F. d’ Alché-Buc, E. Fox, and R. Garnett, editors, Advances in Neural Information Processing Systems 32, pages 8548–8559. Curran Associates, Inc., 2019. URL http: //papers.nips.cc/paper/9061-large-memory-layers-with-product-keys.pdf. \n\n[31] Kenton Lee, Ming-Wei Chang, and Kristina Toutanova. Latent retrieval for weakly supervised open domain question answering. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 6086–6096, Florence, Italy, July 2019. Association for Computational Linguistics. doi: 10.18653/v1/P19-1612. URL https://www.aclweb.org/ anthology/P19-1612. \n\n[32] Mike Lewis, Yinhan Liu, Naman Goyal, Marjan Ghazvininejad, Abdelrahman Mohamed, Omer Levy, Veselin Stoyanov, and Luke Zettlemoyer. BART: Denoising sequence-to-sequence pre-training for natural language generation, translation, and comprehension. arXiv preprint arXiv:1910.13461, 2019. URL https://arxiv.org/abs/1910.13461. \n\n[33] Jiwei Li, Michel Galley, Chris Brockett, Jianfeng Gao, and Bill Dolan. A diversity-promoting objective function for neural conversation models. In Proceedings of the 2016 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, pages 110–119, San Diego, California, June 2016. Association for Computational Linguistics. doi: 10.18653/v1/N16-1014. URL https://www.aclweb.org/anthology/ N16-1014. \n\n[34] Margaret Li, Jason Weston, and Stephen Roller. Acute-eval: Improved dialogue evaluation with optimized questions and multi-turn comparisons. ArXiv, abs/1909.03087, 2019. URL https://arxiv.org/abs/1909.03087. \n\n[35] Hairong Liu, Mingbo Ma, Liang Huang, Hao Xiong, and Zhongjun He. Robust neural machine translation with joint textual and phonetic embedding. In Proceedings of the 57th Annual Meeting of the Association for Computational Linguistics, pages 3044–3049, Florence, Italy, July 2019. Association for Computational Linguistics. doi: 10.18653/v1/P19-1291. URL https://www.aclweb.org/anthology/P19-1291. \n\n[36] Peter J. Liu\\*, Mohammad Saleh\\*, Etienne Pot, Ben Goodrich, Ryan Sepassi, Lukasz Kaiser, and Noam Shazeer. Generating wikipedia by summarizing long sequences. In International Conference on Learning Representations, 2018. URL https://openreview.net/forum? id=Hyg0vbWC-. \n\n[37] Yury A. Malkov and D. A. Yashunin. Efficient and robust approximate nearest neighbor search using hierarchical navigable small world graphs. IEEE Transactions on Pattern Analysis and Machine Intelligence, 42:824–836, 2016. URL https://arxiv.org/abs/1603.09320. \n\n[38] Gary Marcus. The next decade in ai: four steps towards robust artificial intelligence. arXiv preprint arXiv:2002.06177, 2020. URL https://arxiv.org/abs/2002.06177. \n\n[39] Luca Massarelli, Fabio Petroni, Aleksandra Piktus, Myle Ott, Tim Rocktäschel, Vassilis Plachouras, Fabrizio Silvestri, and Sebastian Riedel. How decoding strategies affect the verifiability of generated text. arXiv preprint arXiv:1911.03587, 2019. URL https: //arxiv.org/abs/1911.03587. \n\n[40] Paulius Micikevicius, Sharan Narang, Jonah Alben, Gregory Diamos, Erich Elsen, David Garcia, Boris Ginsburg, Michael Houston, Oleksii Kuchaiev, Ganesh Venkatesh, and Hao Wu. Mixed precision training. In ICLR, 2018. URL https://openreview.net/forum?id $=$ r1gs9JgRZ. \n\n[41] Nikita Moghe, Siddhartha Arora, Suman Banerjee, and Mitesh M. Kh",
    "chunk_order_index": 9,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:662a8f18f7c223a7b6d6c715c43b7d53",
      "default:extract:c39fac6374a34f34473c254a55aa24f6"
    ],
    "create_time": 1757866070,
    "update_time": 1757866151,
    "_id": "chunk-6b046b3a3d5c9333bae80b4874d68e8a"
  },
  "chunk-88b6afd1a5461a754df54d609b370742": {
    "tokens": 1200,
    "content": "Alben, Gregory Diamos, Erich Elsen, David Garcia, Boris Ginsburg, Michael Houston, Oleksii Kuchaiev, Ganesh Venkatesh, and Hao Wu. Mixed precision training. In ICLR, 2018. URL https://openreview.net/forum?id $=$ r1gs9JgRZ. \n\n[41] Nikita Moghe, Siddhartha Arora, Suman Banerjee, and Mitesh M. Khapra. Towards exploiting background knowledge for building conversation systems. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 2322–2332, Brussels, Belgium, October-November 2018. Association for Computational Linguistics. doi: 10.18653/v1/D18-1255. URL https://www.aclweb.org/anthology/D18-1255. \n\n[42] Preksha Nema and Mitesh M. Khapra. Towards a better metric for evaluating question generation systems. In Proceedings of the 2018 Conference on Empirical Methods in Natural Language Processing, pages 3950–3959, Brussels, Belgium, October-November 2018. Association for Computational Linguistics. doi: 10.18653/v1/D18-1429. URL https://www.aclweb.org/ anthology/D18-1429. \n\n[43] Tri Nguyen, Mir Rosenberg, Xia Song, Jianfeng Gao, Saurabh Tiwary, Rangan Majumder, and Li Deng. MS MARCO: A human generated machine reading comprehension dataset. In Tarek Richard Besold, Antoine Bordes, Artur S. d’Avila Garcez, and Greg Wayne, editors, Proceedings of the Workshop on Cognitive Computation: Integrating neural and symbolic approaches 2016 co-located with the 30th Annual Conference on Neural Information Processing Systems (NIPS 2016), Barcelona, Spain, December 9, 2016, volume 1773 of CEUR Workshop Proceedings. CEUR-WS.org, 2016. URL http://ceur-ws.org/Vol-1773/CoCoNIPS_ 2016_paper9.pdf. \n\n[44] Rodrigo Nogueira and Kyunghyun Cho. Passage re-ranking with BERT. arXiv preprint arXiv:1901.04085, 2019. URL https://arxiv.org/abs/1901.04085. \n\n[45] Myle Ott, Sergey Edunov, Alexei Baevski, Angela Fan, Sam Gross, Nathan Ng, David Grangier, and Michael Auli. fairseq: A fast, extensible toolkit for sequence modeling. In Proceedings of the 2019 Conference of the North American Chapter of the Association for Computational Linguistics (Demonstrations), pages 48–53, Minneapolis, Minnesota, June 2019. Association for Computational Linguistics. doi: 10.18653/v1/N19-4009. URL https://www.aclweb. org/anthology/N19-4009. \n\n[46] Ethan Perez, Siddharth Karamcheti, Rob Fergus, Jason Weston, Douwe Kiela, and Kyunghyun Cho. Finding generalizable evidence by learning to convince q&a models. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2402–2411, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/D19-1244. URL https://www.aclweb.org/anthology/D19-1244. \n\n[47] Fabio Petroni, Tim Rocktäschel, Sebastian Riedel, Patrick Lewis, Anton Bakhtin, Yuxiang Wu, and Alexander Miller. Language models as knowledge bases? In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2463–2473, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/ D19-1250. URL https://www.aclweb.org/anthology/D19-1250. \n\n[48] Fabio Petroni, Patrick Lewis, Aleksandra Piktus, Tim Rocktäschel, Yuxiang Wu, Alexander H. Miller, and Sebastian Riedel. How context affects language models’ factual predictions. In Automated Knowledge Base Construction, 2020. URL https://openreview.net/forum? id=025X0zPfn. \n\n[49] Alec Radford, Karthik Narasimhan, Tim Salimans, and Ilya Sutskever. Improving Language Understanding by Generative Pre-Training, 2018. URL https://s3-us-west-2.amazonaws.com/openai-assets/research-covers/ language-unsupervised/language_understanding_paper.pdf. \n\n[50] Alec Radford, Jeff Wu, Rewon Child, David Luan, Dario Amodei, and Ilya Sutskever. Language models are unsupervised multitask learners, 2019. URL https://d4mucfpksywv.cloudfront.net/better-language-models/language_ models_are_unsupervised_multitask_learners.pdf. \n\n[51] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. Exploring the limits",
    "chunk_order_index": 10,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:c10ffa9c0dfca4b9c8d5062d84d4f7ce",
      "default:extract:84449f933096a550664869044e5f1834"
    ],
    "create_time": 1757866070,
    "update_time": 1757866189,
    "_id": "chunk-88b6afd1a5461a754df54d609b370742"
  },
  "chunk-621349422796d54fe59c686c4614e2ce": {
    "tokens": 1200,
    "content": "lya Sutskever. Language models are unsupervised multitask learners, 2019. URL https://d4mucfpksywv.cloudfront.net/better-language-models/language_ models_are_unsupervised_multitask_learners.pdf. \n\n[51] Colin Raffel, Noam Shazeer, Adam Roberts, Katherine Lee, Sharan Narang, Michael Matena, Yanqi Zhou, Wei Li, and Peter J. Liu. Exploring the limits of transfer learning with a unified text-to-text transformer. arXiv e-prints, 2019. URL https://arxiv.org/abs/1910.10683. \n\n[52] Adam Roberts, Colin Raffel, and Noam Shazeer. How much knowledge can you pack into the parameters of a language model? arXiv e-prints, 2020. URL https://arxiv.org/abs/ 2002.08910. \n\n[53] Stephen Robertson and Hugo Zaragoza. The probabilistic relevance framework: Bm25 and beyond. Found. Trends Inf. Retr., 3(4):333–389, April 2009. ISSN 1554-0669. doi: 10.1561/ 1500000019. URL https://doi.org/10.1561/1500000019. \n\n[54] Irene Solaiman, Miles Brundage, Jack Clark, Amanda Askell, Ariel Herbert-Voss, Jeff Wu, Alec Radford, and Jian-Bing Wang. Release strategies and the social impacts of language models. ArXiv, abs/1908.09203, 2019. \n\n[55] Sainbayar Sukhbaatar, Arthur Szlam, Jason Weston, and Rob Fergus. End-to-end memory networks. In C. Cortes, N. D. Lawrence, D. D. Lee, M. Sugiyama, and R. Garnett, editors, Advances in Neural Information Processing Systems 28, pages 2440–2448. Curran Associates, Inc., 2015. URL http://papers.nips.cc/paper/5846-end-to-end-memory-networks.pdf. \n\n[56] James Thorne, Andreas Vlachos, Christos Christodoulopoulos, and Arpit Mittal. FEVER: a large-scale dataset for fact extraction and VERification. In Proceedings of the 2018 Conference of the North American Chapter of the Association for Computational Linguistics: Human Language Technologies, Volume 1 (Long Papers), pages 809–819, New Orleans, Louisiana, June 2018. Association for Computational Linguistics. doi: 10.18653/v1/N18-1074. URL https://www.aclweb.org/anthology/N18-1074. \n\n[57] James H. Thorne and Andreas Vlachos. Avoiding catastrophic forgetting in mitigating model biases in sentence-pair classification with elastic weight consolidation. ArXiv, abs/2004.14366, 2020. URL https://arxiv.org/abs/2004.14366. \n\n[58] Ashish Vaswani, Noam Shazeer, Niki Parmar, Jakob Uszkoreit, Llion Jones, Aidan N Gomez, Ł ukasz Kaiser, and Illia Polosukhin. Attention is all you need. In I. Guyon, U. V. Luxburg, S. Bengio, H. Wallach, R. Fergus, S. Vishwanathan, and R. Garnett, editors, Advances in Neural Information Processing Systems 30, pages 5998–6008. Curran Associates, Inc., 2017. URL http://papers.nips.cc/paper/7181-attention-is-all-you-need.pdf. \n\n[59] Ashwin Vijayakumar, Michael Cogswell, Ramprasaath Selvaraju, Qing Sun, Stefan Lee, David Crandall, and Dhruv Batra. Diverse beam search for improved description of complex scenes. AAAI Conference on Artificial Intelligence, 2018. URL https://www.aaai.org/ocs/index. php/AAAI/AAAI18/paper/view/17329. \n\n[60] Alex Wang, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel Bowman. GLUE: A multi-task benchmark and analysis platform for natural language understanding. In Proceedings of the 2018 EMNLP Workshop BlackboxNLP: Analyzing and Interpreting Neural Networks for NLP, pages 353–355, Brussels, Belgium, November 2018. Association for Computational Linguistics. doi: 10.18653/v1/W18-5446. URL https://www.aclweb.org/ anthology/W18-5446. \n\n[61] Alex Wang, Yada Pruksachatkun, Nikita Nangia, Amanpreet Singh, Julian Michael, Felix Hill, Omer Levy, and Samuel Bowman. SuperGLUE: A Stickier Benchmark for GeneralPurpose Language Understanding Systems. In H. Wallach, H. Larochelle, A. Beygelzimer, F. d\\textquotesingle Alché-Buc, E. Fox, and R. Garnett, editors, Advances in Neural Information Processing Systems 32, pages 3261–3275. Curran Associates, Inc., 2019. URL https:// arxiv.org/abs/1905.00537. \n\n[62] Shuohang Wang, Mo Yu, Xiaoxiao Guo, Zhiguo Wang, Tim Klinger, Wei Zhang, Shiyu Chang, Gerry Tesauro, Bowen Zhou, and Jing Jiang. $\\mathtt { R } ^ { 3 }$ : Reinforced ranker-reader for open-domain question answering",
    "chunk_order_index": 11,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:59f490fe8806dfc26b1895088b3beef3",
      "default:extract:c915b635f2a67bc0357f556ec48c3447"
    ],
    "create_time": 1757866070,
    "update_time": 1757866169,
    "_id": "chunk-621349422796d54fe59c686c4614e2ce"
  },
  "chunk-82335384732cb1d22a6f2ebb27ac180c": {
    "tokens": 1200,
    "content": "3261–3275. Curran Associates, Inc., 2019. URL https:// arxiv.org/abs/1905.00537. \n\n[62] Shuohang Wang, Mo Yu, Xiaoxiao Guo, Zhiguo Wang, Tim Klinger, Wei Zhang, Shiyu Chang, Gerry Tesauro, Bowen Zhou, and Jing Jiang. $\\mathtt { R } ^ { 3 }$ : Reinforced ranker-reader for open-domain question answering. In Sheila A. McIlraith and Kilian Q. Weinberger, editors, Proceedings of the Thirty-Second AAAI Conference on Artificial Intelligence, (AAAI-18), the 30th innovative Applications of Artificial Intelligence (IAAI-18), and the 8th AAAI Symposium on Educational Advances in Artificial Intelligence (EAAI-18), New Orleans, Louisiana, USA, February 2-7, 2018, pages 5981–5988. AAAI Press, 2018. URL https://www.aaai.org/ocs/index. php/AAAI/AAAI18/paper/view/16712. \n\n[63] Shuohang Wang, Mo Yu, Jing Jiang, Wei Zhang, Xiaoxiao Guo, Shiyu Chang, Zhiguo Wang, Tim Klinger, Gerald Tesauro, and Murray Campbell. Evidence aggregation for answer reranking in open-domain question answering. In ICLR, 2018. URL https://openreview. net/forum?id=rJl3yM-Ab. \n\n[64] Jason Weston, Sumit Chopra, and Antoine Bordes. Memory networks. In Yoshua Bengio and Yann LeCun, editors, 3rd International Conference on Learning Representations, ICLR 2015, San Diego, CA, USA, May 7-9, 2015, Conference Track Proceedings, 2015. URL http://arxiv.org/abs/1410.3916. \n\n[65] Jason Weston, Emily Dinan, and Alexander Miller. Retrieve and refine: Improved sequence generation models for dialogue. In Proceedings of the 2018 EMNLP Workshop SCAI: The 2nd International Workshop on Search-Oriented Conversational AI, pages 87–92, Brussels, Belgium, October 2018. Association for Computational Linguistics. doi: 10.18653/v1/W18-5713. URL https://www.aclweb.org/anthology/W18-5713. \n\n[66] Thomas Wolf, Lysandre Debut, Victor Sanh, Julien Chaumond, Clement Delangue, Anthony Moi, Pierric Cistac, Tim Rault, Rémi Louf, Morgan Funtowicz, Joe Davison, Sam Shleifer, Patrick von Platen, Clara Ma, Yacine Jernite, Julien Plu, Canwen Xu, Teven Le Scao, Sylvain Gugger, Mariama Drame, Quentin Lhoest, and Alexander M. Rush. Huggingface’s transformers: State-of-the-art natural language processing. ArXiv, abs/1910.03771, 2019. \n\n[67] Shiyue Zhang and Mohit Bansal. Addressing semantic drift in question generation for semisupervised question answering. In Proceedings of the 2019 Conference on Empirical Methods in Natural Language Processing and the 9th International Joint Conference on Natural Language Processing (EMNLP-IJCNLP), pages 2495–2509, Hong Kong, China, November 2019. Association for Computational Linguistics. doi: 10.18653/v1/D19-1253. URL https://www.aclweb.org/anthology/D19-1253. \n\n[68] Wanjun Zhong, Jingjing Xu, Duyu Tang, Zenan Xu, Nan Duan, Ming Zhou, Jiahai Wang, and Jian Yin. Reasoning over semantic-level graph for fact checking. ArXiv, abs/1909.03745, 2019. URL https://arxiv.org/abs/1909.03745. \n\nAppendices for Retrieval-Augmented Generation for Knowledge-Intensive NLP Tasks \n\nA Implementation Details \n\nFor Open-domain QA we report test numbers using 15 retrieved documents for RAG-Token models. For RAG-Sequence models, we report test results using 50 retrieved documents, and we use the Thorough Decoding approach since answers are generally short. We use greedy decoding for QA as we did not find beam search improved results. For Open-MSMarco and Jeopardy question generation, we report test numbers using ten retrieved documents for both RAG-Token and RAG-Sequence, and we also train a BART-large model as a baseline. We use a beam size of four, and use the Fast Decoding approach for RAG-Sequence models, as Thorough Decoding did not improve performance. \n\nB Human Evaluation \n\nFigure 4 shows the user interface for human evaluation. To avoid any biases for screen position, which model corresponded to sentence A and sentence B was randomly selected for each example. Annotators were encouraged to research the topic using the internet, and were given detailed instructions and worked examples in a full instructions tab. We included some gold sentences in order to assess the accuracy of the annotators. Two annotators did not perform well on these examples and their annotations were removed from the results. \n\nC Training setup Details \n\nWe train all RAG models and BART baselines using Fairseq [45].2 We train with mixed precision floating point arithmetic [40], distributing training across 8, 32GB NVIDIA V100 GPUs, though training and inference can be run on one GPU. We find that doing Maximum Inner Product Search with FAISS is sufficiently fast on CPU, so we store document index vectors on",
    "chunk_order_index": 12,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:5b57697e49b3ff4725a759adc152bd66",
      "default:extract:8c2e5cb9a8c7b255afd6dab8652f775f"
    ],
    "create_time": 1757866070,
    "update_time": 1757866174,
    "_id": "chunk-82335384732cb1d22a6f2ebb27ac180c"
  },
  "chunk-b3e73eca6691f1d73f88752711bc074c": {
    "tokens": 1200,
    "content": "did not perform well on these examples and their annotations were removed from the results. \n\nC Training setup Details \n\nWe train all RAG models and BART baselines using Fairseq [45].2 We train with mixed precision floating point arithmetic [40], distributing training across 8, 32GB NVIDIA V100 GPUs, though training and inference can be run on one GPU. We find that doing Maximum Inner Product Search with FAISS is sufficiently fast on CPU, so we store document index vectors on CPU, requiring $\\sim 1 0 0$ GB of CPU memory for all of Wikipedia. After submission, We have ported our code to HuggingFace Transformers $[ 6 6 ] ^ { 3 }$ , which achieves equivalent performance to the previous version but is a cleaner and easier to use implementation. This version is also open-sourced. We also compress the document index using FAISS’s compression tools, reducing the CPU memory requirement to 36GB. Scripts to run experiments with RAG can be found at https://github.com/huggingface/transformers/ blob/master/examples/rag/README.md and an interactive demo of a RAG model can be found at https://huggingface.co/rag/ \n\nD Further Details on Open-Domain QA \n\nFor open-domain QA, multiple answer annotations are often available for a given question. These answer annotations are exploited by extractive models during training as typically all the answer annotations are used to find matches within documents when preparing training data. For RAG, we also make use of multiple annotation examples for Natural Questions and WebQuestions by training the model with each $( q , a )$ pair separately, leading to a small increase in accuracy. For TriviaQA, there are often many valid answers to a given question, some of which are not suitable training targets, such as emoji or spelling variants. For TriviaQA, we filter out answer candidates if they do not occur in top 1000 documents for the query. \n\nCuratedTrec preprocessing The answers for CuratedTrec are given in the form of regular expressions, which has been suggested as a reason why it is unsuitable for answer-generation models [20]. To overcome this, we use a pre-processing step where we first retrieve the top 1000 documents for each query, and use the answer that most frequently matches the regex pattern as the supervision target. If no matches are found, we resort to a simple heuristic: generate all possible permutations for each regex, replacing non-deterministic symbols in the regex nested tree structure with a whitespace. \n\nTriviaQA Evaluation setups The open-domain QA community customarily uses public development datasets as test datasets, as test data for QA datasets is often restricted and dedicated to reading compehension purposes. We report our results using the datasets splits used in DPR [26], which are consistent with common practice in Open-domain QA. For TriviaQA, this test dataset is the public TriviaQA Web Development split. Roberts et al. [52] used the TriviaQA official Wikipedia test set instead. Févry et al. [14] follow this convention in order to compare with Roberts et al. [52] (See appendix of [14]). We report results on both test sets to enable fair comparison to both approaches. We find that our performance is much higher using the official Wiki test set, rather than the more conventional open-domain test set, which we attribute to the official Wiki test set questions being simpler to answer from Wikipedia. \n\nE Further Details on FEVER \n\nFor FEVER classification, we follow the practice from [32], and first re-generate the claim, and then classify using the representation of the final hidden state, before finally marginalizing across documents to obtain the class probabilities. The FEVER task traditionally has two sub-tasks. The first is to classify the claim as either \"Supported\", \"Refuted\" or \"Not Enough Info\", which is the task we explore in the main paper. FEVER’s other sub-task involves extracting sentences from Wikipedia as evidence supporting the classification prediction. As FEVER uses a different Wikipedia dump to us, directly tackling this task is not straightforward. We hope to address this in future work. \n\nF Null Document Probabilities \n\nWe experimented with adding \"Null document\" mechanism to RAG, similar to REALM [20] in order to model cases where no useful information could be retrieved for a given input. Here, if $k$ documents were retrieved, we would additionally \"retrieve\" an empty document and predict a logit for the null document, before marginalizing over $k + 1$ predictions. We explored modelling this null document logit by learning (i) a document embedding for the null document, (ii) a static learnt bias term, or (iii) a neural network to predict the logit. We did not find that these improved performance, so in the interests of simplicity, we omit them. For Open MS-MARCO, where useful retrieved documents cannot always be retrieved, we observe that the model learns to always retrieve a particular set of documents for questions that are less likely to benefit from retrieval, suggesting that null document mechanisms may not be necessary for RAG. \n\nG Parameters \n\nOur RAG models contain the trainable parameters for the BERT-base query and document encoder of DPR, with 110M parameters each (although we do not train the document encoder ourselves) and 406M trainable parameters from BART-large, 406M parameters, making a total of 626M trainable parameters. The best performing \"closed-book\" (parametric only) open-domain QA model is T5-11B with 11 Billion trainable parameters. The T5 model with the closest number of parameters to our models is T5-large (770M parameters), which achieves a score of $2 8 . 9 \\mathrm { E M }$ on Natural Questions [52], substantially below the",
    "chunk_order_index": 13,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:f35fe51f91e90f58ef29ea48b51e86cc",
      "default:extract:250b48aea7ea7b8ade8519529e479be5"
    ],
    "create_time": 1757866070,
    "update_time": 1757866174,
    "_id": "chunk-b3e73eca6691f1d73f88752711bc074c"
  },
  "chunk-d70c6f37764e4792ca46bea09a315724": {
    "tokens": 352,
    "content": "ART-large, 406M parameters, making a total of 626M trainable parameters. The best performing \"closed-book\" (parametric only) open-domain QA model is T5-11B with 11 Billion trainable parameters. The T5 model with the closest number of parameters to our models is T5-large (770M parameters), which achieves a score of $2 8 . 9 \\mathrm { E M }$ on Natural Questions [52], substantially below the 44.5 that RAG-Sequence achieves, indicating that hybrid parametric/nonparametric models require far fewer trainable parameters for strong open-domain QA performance. The non-parametric memory index does not consist of trainable parameters, but does consists of 21M 728 dimensional vectors, consisting of 15.3B values. These can be easily be stored at 8-bit floating point precision to manage memory and disk footprints. \n\nH Retrieval Collapse \n\nIn preliminary experiments, we observed that for some tasks such as story generation [11], the retrieval component would “collapse” and learn to retrieve the same documents regardless of the input. In these cases, once retrieval had collapsed, the generator would learn to ignore the documents, and the RAG model would perform equivalently to BART. The collapse could be due to a less-explicit requirement for factual knowledge in some tasks, or the longer target sequences, which could result in less informative gradients for the retriever. Perez et al. [46] also found spurious retrieval results when optimizing a retrieval component in order to improve performance on downstream tasks. \n\nI Number of instances per dataset \n\nThe number of training, development and test datapoints in each of our datasets is shown in Table 7.",
    "chunk_order_index": 14,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:22ba6a6de16608af5ac7866ddfb1a3a7",
      "default:extract:49ca307b1a42a7fdbcb2efa147c2f17d"
    ],
    "create_time": 1757866070,
    "update_time": 1757866178,
    "_id": "chunk-d70c6f37764e4792ca46bea09a315724"
  },
  "chunk-3547e8b4b8c6d06e5c87ace847239e13": {
    "content": "\nImage Content Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/9614bd00efc1de0c312c74bbcc62137b2e90de5746a4df37db8a38007e351937.jpg\nCaptions: None\nFootnotes: None\n\nVisual Analysis: The image is an illustrative diagram depicting the architecture and process flow of a retrieval-augmented generation (RAG) system, which integrates both non-parametric and parametric memory components for natural language processing tasks. The entire composition is laid out in a step-by-step horizontal flow from left to right. On the left, the diagram begins with a section labeled 'Query Encoder q(x),' represented by a large green rectangle. This section is responsible for encoding input queries with the text examples: 'Define ",
    "tokens": 193,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 15,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:b13b62e43bc2be83c66421cdf0053bdf",
      "default:extract:07cdb234637f4596d6c4366172cfd6b2"
    ],
    "is_multimodal": true,
    "modal_entity_name": "RAG System Process Diagram (image)",
    "original_type": "image",
    "page_idx": 1,
    "create_time": 1757866396,
    "update_time": 1757866410,
    "_id": "chunk-3547e8b4b8c6d06e5c87ace847239e13"
  },
  "chunk-ed49c26a398a6bba5d1b396a04a8fc38": {
    "content": "Mathematical Equation Analysis:\nEquation: $$\np _ { \\mathrm { R A G . S e q u e n c e } } ( y | x ) \\approx \\sum _ { z \\in \\mathrm { t o p } \\cdot k ( p ( z | x ) ) } p _ { \\theta } ( y | x , z ) \\ = \\ \\sum _ { z \\in \\mathrm { t o p } \\cdot k ( p ( \\cdot | x ) ) } p _ { \\eta } ( z | x ) \\prod _ { i } ^ { N } p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )\n$$\nFormat: latex\n\nMathematical Analysis: The equation $$p _ { \\mathrm { R A G . S e q u e n c e } } ( y | x ) \\\\approx \\\\sum _ { z \\\\in \\\\mathrm { t o p } \\\\cdot k ( p ( z | x ) ) } p _ { \\\\theta } ( y | x , z ) = \\\\sum _ { z \\\\in \\\\mathrm { t o p } \\\\cdot k ( p ( \\\\cdot | x ) ) } p _ { \\\\eta } ( z | x ) \\\\prod _ { i } ^ { N } p _ { \\\\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )$$ summarizes the RAG-Sequence model's probability distribution of output sequence given an input sequence. \\n\\n- **Mathematical meaning and interpretation:** The equation represents a marginalization process where the output sequence \\\\( y \\\\) is generated based on the retrieved documents \\\\( z \\\\) given the input sequence \\\\( x \\\\). It captures the joint probability distribution over the output given the input and the retrieved context.\\n- **Variables and their definitions:** \\\\( y \\\\): the output sequence generated, \\\\( x \\\\): the input query, \\\\( z \\\\): documents retrieved from a memory index, \\\\( k \\\\): the top K documents selected, \\\\( p_{\\\\theta} \\\\): generator’s probability distribution, and \\\\( p_{\\\\eta} \\\\): retriever’s probability distribution.\\n- **Mathematical operations and functions used:** The equation employs probabilistic models through summation (marginalization), and the joint distributions are factored using the product of probabilities, reflecting dependency on prior tokens in sequence generation.\\n- **Application domain and context:** This equation is applied in the field of Natural Language Processing (NLP), specifically in retrieval-augmented generation tasks like question answering and knowledge-intensive text generation.\\n- **Physical or theoretical significance:** It signifies a fundamental advancement in combining retrieval and generation in AI models, facilitating the incorporation of external knowledge sources dynamically during text generation.\\n- **Relationship to other mathematical concepts:** The equation implements Bayesian principles of inference, while leveraging the principles of sequences in Markov processes due to the autoregressive nature of the generation method.\\n- **Practical applications or use cases:** The RAG-Sequence model can be applied for tasks which require contextual knowledge such as open domain question answering or generating answers for specific queries using vast external knowledge like Wikipedia.\\n- **Broader discussion or framework:** This equation forms a core component of the RAG framework, allowing it to function effectively within the hybrid architecture of pre-trained parametric and non-parametric memories, thereby enhancing generative capabilities in systems like BART on information-rich tasks.",
    "tokens": 745,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 16,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:e05791ef9cccf7834e7de13dbc941efa",
      "default:extract:a08d16063efc5daefbdd7f7f1f5d4a53"
    ],
    "is_multimodal": true,
    "modal_entity_name": "RAG-Sequence Probability Equation (equation)",
    "original_type": "equation",
    "page_idx": 2,
    "create_time": 1757866396,
    "update_time": 1757866417,
    "_id": "chunk-ed49c26a398a6bba5d1b396a04a8fc38"
  },
  "chunk-3cb3c70372c63f01c7e14e4ca3b06e1c": {
    "content": "Mathematical Equation Analysis:\nEquation: $$\np _ { \\mathtt { R A G - I o k e n } } ( y | x ) \\approx \\prod _ { i } ^ { N } \\sum _ { z \\in \\mathrm { t o p } \\cdot k ( p ( \\cdot | x ) ) } p _ { \\eta } ( z | x ) p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )\n$$\nFormat: latex\n\nMathematical Analysis: The equation $$p _ { \\mathtt { R A G - I o k e n } } ( y | x ) \\approx \\prod _ { i } ^ { N } \\sum _ { z \\in \\mathrm { t o p } \\cdot k ( p ( \\cdot | x ) ) } p _ { \\eta } ( z | x ) p _ { \\theta } ( y _ { i } | x , z , y _ { 1 : i - 1 } )$$ formulates a probabilistic model for generating a sequence of tokens \\( y \\) conditioned on an input sequence \\( x \\), where the generation process is augmented by retrieval of relevant documents \\( z \\). This model operates under the framework of retrieval-augmented generation (RAG), integrating two types of memory: parametric (modeled by a seq2seq generator) and non-parametric (encoded in a document index). The term \\( p_{\\eta}(z | x) \\) represents the probability distribution over retrieved documents given the input, while \\( p_{\\theta}(y_i | x, z, y_{1:i-1}) \\) is the conditional probability of generating the token \\( y_i \\) based on the previous tokens and the input context. The use of the product and sum in the equation captures the dependencies across different tokens while marginalizing over the retrieved documents. This equation operationalizes the RAG framework in tasks requiring knowledge retrieval and generation, emphasizing the parallel integration of generative and retrieval-based methodologies. It also indicates flexibility in document selection per target token, allowing for diverse and factual generation based on varying contexts. In the context of computational linguistics, this equation represents a sophisticated approach to combining pre-trained models with retrieval mechanisms to enhance the performance of tasks such as question answering, summarization, and fact verification. The probabilistic interpretation links to concepts of Bayesian inference and helps illustrate how uncertainty is modeled in the generative process. This model's practical applications include open-domain question answering and competitive performance in standardized knowledge-intensive benchmarks, reinforcing the vitality of accessing augmented information sources.",
    "tokens": 552,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 17,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:19fd45c11dc1667c0e310911a93acaf4",
      "default:extract:ef1600d39989ab3fc171ef5ecd427005"
    ],
    "is_multimodal": true,
    "modal_entity_name": "RAG-Token Probability Model (equation)",
    "original_type": "equation",
    "page_idx": 2,
    "create_time": 1757866396,
    "update_time": 1757866414,
    "_id": "chunk-3cb3c70372c63f01c7e14e4ca3b06e1c"
  },
  "chunk-67a3cd875d9c37aecd1b5e13b208485f": {
    "content": "Mathematical Equation Analysis:\nEquation: $$\np _ { \\eta } ( z | x ) \\propto \\exp \\left( \\mathbf { d } ( z ) ^ { \\top } \\mathbf { q } ( x ) \\right) \\qquad \\mathbf { d } ( z ) = \\mathrm { B E R T } _ { d } ( z ) , \\ \\mathbf { q } ( x ) = \\mathrm { B E R T } _ { q } ( x )\n$$\nFormat: latex\n\nMathematical Analysis: The equation $$p _ { \\eta } ( z | x ) \\propto \\exp \\left( \\mathbf { d } ( z ) ^ { \\top } \\mathbf { q } ( x ) \\right)$$ represents the conditional probability of retrieving document $z$ given an input query $x$. Here, $\\mathbf{d}(z)$ and $\\mathbf{q}(x)$ are dense vector representations of the document $z$ and input query $x$, respectively, obtained through the BERT model. The exponential function indicates a probabilistic relationship where documents closer in the latent space (higher inner product) yield higher retrieval likelihoods. The formulation uses maximum inner product search (MIPS) methodology to efficiently retrieve the top-K documents, crucial in large-scale document indexing applications. The function $p_{\\eta}(z|x)$ integrates both parametric and non-parametric memory components in the Retrieval-Augmented Generation (RAG) model. This equation exemplifies the synergy in neural architectures for processing and generating language based on contextual knowledge, relevant in natural language processing tasks.",
    "tokens": 336,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 18,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:c1feb6fe980ac315a30cd849e078c2cf",
      "default:extract:7b55266f7e03055790a6392a91d0d1b1"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Conditional Document Retrieval Probability (equation)",
    "original_type": "equation",
    "page_idx": 2,
    "create_time": 1757866396,
    "update_time": 1757866420,
    "_id": "chunk-67a3cd875d9c37aecd1b5e13b208485f"
  },
  "chunk-f81b9b5d1c9a7a4813270007967c2bf8": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/88ce7cfebc272af9311f70d9b11730f19b4149e53d903a858698f296112b9e25.jpg\nCaption: Table 1: Open-Domain QA Test Scores. For TQA, left column uses the standard test set for OpenDomain QA, right column uses the TQA-Wiki test set. See Appendix D for further details. \nStructure: <table><tr><td>Model</td><td></td><td>NQ TQA</td><td>WQ</td><td>CT</td></tr><tr><td>Closed Book</td><td>T5-11B [52] T5-11B+SSM[52]</td><td>34.5 36.6</td><td>- /50.1 - /60.5</td><td>37.4 - 44.7 -</td></tr><tr><td>Open</td><td>REALM [20]</td><td>40.4 -/</td><td>40.7</td><td>46.8</td></tr><tr><td>Book</td><td>DPR [26]</td><td>41.5</td><td>57.9/-</td><td>41.1 50.6</td></tr><tr><td></td><td>RAG-Token</td><td>44.1</td><td>55.2/66.1</td><td>45.5 50.0</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td>RAG-Seq.</td><td>44.5</td><td>56.8/68.0</td><td>45.2 52.2</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents scores from various models in open-domain question answering tasks, specifically focusing on the performance of retrieval-augmented generation (RAG) approaches against several state-of-the-art models like T5, REALM, and DPR. The structure comprises four columns detailing the model names and their corresponding scores across different metrics: NQ, TQA, WQ, and CT. Key data points illustrate that both RAG-Token and RAG-Sequence achieve the highest scores in nearly all categories, particularly excelling in the NQ score (44.1 and 44.5 respectively), indicating their strengths in generative capabilities while effectively utilizing retrieval techniques. Notably, RAG shows superior performance without the need for sophisticated preprocessing of inputs such as salient span masking. Statistical insights reflect a consistent trend of RAG models outperforming closed-book systems (like standard T5) and synthetic approaches (like REALM) in open-book tasks, suggesting a compelling fusion of knowledge generation and retrieval. The relationships between the model types clarify how RAG leverages both parametric knowledge (like that in T5) and external document retrieval (shown in REALM and DPR), enhancing performance on complex QA tasks. Additionally, the surrounding context emphasizes the challenges of traditional QA systems, justifying RAG's innovative approaches that capitalize on knowledge that may not be captured in isolated passages. This table, therefore, supports the narrative that RAG not only improves factual accuracy but also increases the ability to generate correct answers through marginalization of information across potentially multiple documents.",
    "tokens": 770,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 19,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:d237e36c4b26134a71eb52872d1e14f3",
      "default:extract:be9d387adb7b534f2263dd5cfa1f5a29"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Open-Domain QA Test Scores (table)",
    "original_type": "table",
    "page_idx": 5,
    "create_time": 1757866396,
    "update_time": 1757866435,
    "_id": "chunk-f81b9b5d1c9a7a4813270007967c2bf8"
  },
  "chunk-e677e8584c8111e2fbb38897fae32287": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/5ff408c8d7f3a5cc8b975635d34471e5a121742b22af347222876d97ff64dcdc.jpg\nCaption: Table 2: Generation and classification Test Scores. MS-MARCO SotA is [4], FEVER-3 is [68] and FEVER-2 is [57] \\*Uses gold context/evidence. Best model without gold access underlined. \nStructure: <table><tr><td rowspan=\"2\">Model</td><td colspan=\"2\">Jeopardy B-1QB-1</td><td colspan=\"2\">MSMARCO</td><td colspan=\"2\">FVR3 FVR2 Label Acc.</td></tr><tr><td></td><td></td><td>R-L 49.8*</td><td>B-1 49.9*</td><td>76.8</td><td>92.2*</td></tr><tr><td>SotA BART</td><td>- 15.1</td><td>1 19.7</td><td>38.2</td><td>41.6</td><td>64.0</td><td>81.1</td></tr><tr><td>RAG-Tok. RAG-Seq.</td><td>17.3 14.7</td><td>22.2 21.4</td><td>40.1 40.8</td><td>41.5 44.2</td><td>72.5</td><td>89.5</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents results comparing various models on Jeopardy question generation and the MS-MARCO and FEVER tasks. It is structured in a multi-level format, with the first row defining model names and benchmark metrics categorized by Jeopardy and MS-MARCO performance. The column headers signify different performance metrics - B-1 represents the BLEU-1 score relevant for question generation, while R-L and Label Accuracy pertain to other quantitative evaluations. Key data points include RAG-Token achieving a BLEU-1 score of 17.3 on Jeopardy, outperforming the baseline model BART (15.1), indicating RAG-Token's superiority in generating natural language questions. The trends show that models relying on retrieval mechanisms (RAG-Sequence) consistently outperform traditional ones (BART) across diverse tasks, suggesting the benefit of parametric knowledge in generating factual and contextually rich outputs. The relationships reveal that advancements in question generation systems could potentially improve QA tasks dramatically, which align with the exploration of RAG's capabilities in open-domain tasks described in the surrounding content. RAG's performance seems particularly remarkable given its lack of reliance on gold passages, emphasizing its ability to synthesize information effectively and adaptively from broader data, reinforcing the principles outlined on effective QA methodologies in the previous segments.",
    "tokens": 665,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 20,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:e415624eade42c8f4384c18474958526",
      "default:extract:83e0b5eaf8204feab0cbe5ba2326a98e"
    ],
    "is_multimodal": true,
    "modal_entity_name": "RAG Performance Results Table (table)",
    "original_type": "table",
    "page_idx": 5,
    "create_time": 1757866396,
    "update_time": 1757866432,
    "_id": "chunk-e677e8584c8111e2fbb38897fae32287"
  },
  "chunk-0e88be2ccc273f5476f809546920b89f": {
    "content": "\nImage Content Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/8ee723736d9f532ea6d28bfef9c129c4d70df11bf4028a4e41dd5a7ae3dd6123.jpg\nCaptions: None\nFootnotes: None\n\nVisual Analysis: The image is a visualization comprising a heatmap with a focus on language generation, specifically related to the text 'The Sun Also Rises' and 'A Farewell to Arms'. The overall layout is a rectangular matrix with rows labeled as Doc 1 through Doc 5 on the vertical axis, representing different documents. The horizontal axis is divided into columns, each labeled with parts of sentences or tokens: 'BOS', 'The', 'Sun', 'Also', 'R', 'ises', 'is', 'a', 'novel', 'by', 'this', 'author', 'of', 'A', 'Fare', 'well', 'to', 'Arms'. The background color of the matrix is light blue, with varying intensities indicating the weight or importance of each token in each document context. Darker blue signifies higher importance or relevance. Notably, the tokens 'The Sun Also Rises' show increased intensity in Doc 2, while 'A Farewell to Arms' is more prominent in Doc 1. This relationship suggests that the model might leverage these specific documents when constructing sentences or when confronted with related queries as described in the surrounding document context. The heatmap underscores how the RAG model utilizes parametric knowledge stored in different document contexts to aid in sentence completion or answer generation, as discussed in the surrounding research context emphasizing parametric and non-parametric memory in language models.",
    "tokens": 379,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 21,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:912f0e2285ed2d896a1bcedbb66c868d",
      "default:extract:796f4e9e4d479d605f88888634106a20"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Document Generation Heatmap Visualization (image)",
    "original_type": "image",
    "page_idx": 6,
    "create_time": 1757866396,
    "update_time": 1757866434,
    "_id": "chunk-0e88be2ccc273f5476f809546920b89f"
  },
  "chunk-5a0294c30c4299ee3e2c0f5a634e94c0": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/aa951a97042a91bc85ece7f254e8082f7a416148b1b3426d32e18497901bafa1.jpg\nCaption: Table 3: Examples from generation tasks. RAG models generate more specific and factually accurate responses. ‘?’ indicates factually incorrect responses, \\* indicates partially correct responses. \nStructure: <table><tr><td>Task</td><td>Input</td><td>Model</td><td>Generation</td></tr><tr><td rowspan=\"4\">MS- MARCO</td><td rowspan=\"2\">define middle ear</td><td>BART RAG-T</td><td>?The middle ear is the part of the ear between the middle ear and the nose. The middle ear is the portion of the ear internal to the eardrum.</td></tr><tr><td>RAG-S</td><td>The middle ear includes the tympanic cavity and the three ossicles.</td></tr><tr><td rowspan=\"2\">what currency needed in</td><td>BART</td><td></td></tr><tr><td>RAG-T</td><td>The currency needed in Scotland is Pound sterling. Pound is the currency needed in Scotland.</td></tr><tr><td rowspan=\"4\">Jeopardy Question</td><td rowspan=\"2\">scotland Washington</td><td>RAG-S</td><td>The currency needed in Scotland is the pound sterling.</td></tr><tr><td>BART</td><td>?This state has the largest number of counties in the U.S.</td></tr><tr><td rowspan=\"2\"></td><td>RAG-T1 RAG-S</td><td>It&#x27;s the only U.S. state named for a U.S. president It&#x27;s the state where you&#x27;ll find Mount Rainier National Park</td></tr><tr><td></td><td></td></tr><tr><td rowspan=\"4\">Gener -ation</td><td rowspan=\"2\">The Divine Comedy</td><td>BART</td><td>*This epic poem by Dante is divided into 3 parts:the Inferno,the Purgatorio &amp; the Purgatorio</td></tr><tr><td>RAG-T</td><td>Dante&#x27;s &quot;Inferno&quot;is the first part of this epic poem</td></tr><tr><td></td><td></td><td>This 14th century work is divided into 3 sections:&quot;Inferno&quot;,&quot;Purgatorio&quot;&amp; &quot;Paradiso&quot;</td></tr><tr><td></td><td>RAG-S</td><td></td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents comparative examples of answers generated by various models applied to diverse tasks, primarily focusing on RAG models (RAG-Token and RAG-Sequence) versus BART. The structure consists of four main columns: 'Task', 'Input', 'Model', and 'Generation'. The 'Task' column indicates the type of query (e.g., MS-MARCO, Jeopardy Question, etc.), while 'Input' contains the specific questions posed to the models. The 'Model' column lists the models utilized to generate answers, and 'Generation' shows the actual product or output from the models. Notably, the table reveals that RAG models consistently provide more accurate and specific responses than BART, illustrated by examples where RAG-Sequence answers comprehensively compared to BART’s uncertain or partially correct outputs (e.g., '?' and '*' markers). Statistically, RAG outperforms BART in factual accuracy, as indicated in the surrounding sections, highlighting the significance of retrieval-augmented generation in producing reliable outputs. The relations among tasks, inputs, and model performances illustrate how RAG's enhanced ability to combine contextual knowledge from multiple sources leads to improved answer quality. This supports the broader claim in the surrounding content that RAG models excel in generating more robust and factual text, crucial for applications like Q&A systems and evaluation metrics.",
    "tokens": 915,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 22,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:c00da4a60e78f6df91953e0144b9617d",
      "default:extract:e1ae87a7e161a7b37c44357a4fcd83c9"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Comparative Model Generations for Question Answering (table)",
    "original_type": "table",
    "page_idx": 6,
    "create_time": 1757866396,
    "update_time": 1757866437,
    "_id": "chunk-5a0294c30c4299ee3e2c0f5a634e94c0"
  },
  "chunk-9602588f9a41c6c9eaeca67413aaf7ae": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/6b364482d532a82c161902ab350d9c2fc66a473108d27cd01df07d2cccb1b26f.jpg\nCaption: Table 4: Human assessments for the Jeopardy Question Generation Task. \nStructure: <table><tr><td colspan=\"2\">Factuality</td><td>Specificity</td></tr><tr><td>BARTbetter</td><td>7.1%</td><td>16.8%</td></tr><tr><td>RAG better</td><td>42.7%</td><td>37.4%</td></tr><tr><td>Both good</td><td>11.7%</td><td>11.8%</td></tr><tr><td>Both poor</td><td>17.7%</td><td>6.9%</td></tr><tr><td>No majority</td><td>20.8%</td><td>20.1%</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents human assessments for the Jeopardy Question Generation Task with a focus on two key metrics: Factuality and Specificity. The table is structured in a 3-column format where the first column lists different comparison categories between the models BART and RAG, while the second and third columns provide the corresponding percentages for Factuality and Specificity. Notably, 'RAG better' shines with 42.7% in Factuality, which is significantly higher than BART's 7.1%, illustrating that RAG's outputs are perceived as more accurate. Similarly, for Specificity, RAG again outperformed BART with 37.4% compared to 16.8% for BART. The data points suggest a clear trend favoring RAG over BART in both assessments, indicating that RAG provides more factual and specific outputs, aligning with the surrounding analysis declaring RAG as superior in generative tasks. The existence of 'Both good' and 'Both poor' categories with 11.7% and 17.7%, respectively, suggest that while there are successful cases for both models, RAG often yields more acceptable results. This table supports the surrounding content's claims regarding RAG's performance in comparison to classic models like BART, reinforcing its advancements in generative tasks used across various NLP applications.",
    "tokens": 540,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 23,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:cc70411b5f90d3bcb18b07954a8e3ff6",
      "default:extract:344e9bb590a63ed96e7c63f243460fc8"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Human Assessments for Jeopardy Question Generation (table)",
    "original_type": "table",
    "page_idx": 7,
    "create_time": 1757866396,
    "update_time": 1757866447,
    "_id": "chunk-9602588f9a41c6c9eaeca67413aaf7ae"
  },
  "chunk-1dd05d174cc46f951f0f9378efa364a9": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/ac2b30042c392e6d32a617862d578d00d3b6cae10ae41db61834183015f31ff1.jpg\nCaption: Table 5: Ratio of distinct to total tri-grams for generation tasks. \nStructure: <table><tr><td></td><td>MSMARCO</td><td>Jeopardy QGen</td></tr><tr><td>Gold</td><td>89.6%</td><td>90.0%</td></tr><tr><td>BART</td><td>70.7%</td><td>32.4%</td></tr><tr><td>RAG-Token</td><td>77.8%</td><td>46.8%</td></tr><tr><td>RAG-Seq.</td><td>83.5%</td><td>53.8%</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents a comparison of the ratio of distinct to total tri-grams generated by different models (Gold, BART, RAG-Token, RAG-Sequence) across two generation tasks: MSMARCO and Jeopardy QGen. The structure of the table includes two primary columns: one for the model names and the other for the distinct-to-total tri-gram ratios for each generation task. The 'Gold' row, which serves as a benchmark, achieved the highest ratios, particularly in the Jeopardy QGen task at 90.0%. BART demonstrated the lowest performance overall, indicating its generation's lack of diversity, especially in Jeopardy QGen (32.4%). In contrast, both RAG models, particularly RAG-Sequence (83.5% and 53.8% respectively), indicated notable improvements in diversity over BART, showcasing the effectiveness of the RAG architecture in generating diverse outputs. The surrounding context highlights the significance of retrieval-enhanced architectures, aligning with the table's findings that model retrieval capabilities can lead to more factually rich and diverse generations, which is critical in NLP applications such as open-domain QA.",
    "tokens": 481,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 24,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:8c40d8e4dcb49e40a241981389ff2336",
      "default:extract:ad8143dccc22e492ab4b86b114c6492e"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Tri-gram Diversity Ratios in Generation Tasks (table)",
    "original_type": "table",
    "page_idx": 7,
    "create_time": 1757866396,
    "update_time": 1757866452,
    "_id": "chunk-1dd05d174cc46f951f0f9378efa364a9"
  },
  "chunk-0dc5f0a2ca0f99aef13c5f054b56fd98": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/dea0a250480595cebc34df4edd84443d646d95a944bef4592f5b26fc2380f290.jpg\nCaption: Table 6: Ablations on the dev set. As FEVER is a classification task, both RAG models are equivalent. \nStructure: <table><tr><td>Model</td><td>NQ</td><td>TQA</td><td>WQ</td><td>CT</td><td colspan=\"2\">Jeopardy-QGen</td><td colspan=\"2\">MSMarco</td><td colspan=\"2\">FVR-3 FVR-2 Label Accuracy</td></tr><tr><td></td><td></td><td>Exact Match</td><td></td><td></td><td>B-1</td><td>QB-1</td><td>R-L</td><td>B-1</td><td></td><td></td></tr><tr><td>RAG-Token-BM25 RAG-Sequence-BM25</td><td>29.7</td><td>41.5</td><td>32.1</td><td>33.1</td><td>17.5</td><td>22.3</td><td>55.5</td><td>48.4</td><td rowspan=\"2\">75.1</td><td rowspan=\"2\">91.6</td></tr><tr><td></td><td>31.8</td><td>44.1</td><td>36.6</td><td>33.8</td><td>11.1</td><td>19.5</td><td>56.5</td><td>46.9</td></tr><tr><td>RAG-Token-Frozen</td><td>37.8</td><td>50.1</td><td>37.1</td><td>51.1</td><td>16.7</td><td>21.7</td><td>55.9</td><td>49.4</td><td rowspan=\"2\">72.9</td><td rowspan=\"2\">89.4</td></tr><tr><td>RAG-Sequence-Frozen</td><td>41.2</td><td>52.1</td><td>41.8</td><td>52.6</td><td>11.8</td><td>19.6</td><td>56.7</td><td>47.3</td></tr><tr><td>RAG-Token</td><td>43.5</td><td>54.8</td><td>46.5</td><td>51.9</td><td>17.9</td><td>22.6</td><td>56.2</td><td>49.4</td><td rowspan=\"2\">74.5</td><td rowspan=\"2\">90.6</td></tr><tr><td>RAG-Sequence</td><td>44.0</td><td>55.8</td><td>44.9</td><td>53.4</td><td>15.3</td><td>21.5</td><td>57.2</td><td>47.5</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents a comparative analysis of various models' performance metrics across a range of tasks relevant to natural language processing (NLP) retrieval-based architectures. The header indicates the models tested (specifically RAG-Token and RAG-Sequence with different configurations like BM25 and Frozen), followed by performance scores in different tasks: NQ (Natural Questions), TQA (Trivia Question Answering), WQ (Web Questions), CT (Close Test), and metrics for Jeopardy-QGen and MSMarco. Key data points reveal that RAG models, particularly RAG-Sequence, exhibit superior performance across almost all metrics compared to their RAG-Token counterparts, with notable significant differences in Exact Match and ROUGE-L scores. The table correlates with the surrounding content emphasizing the superiority of retrieval-augmented generation models over conventional models, boosting factual accuracy and specificity, particularly in open-domain question answering. The patterns illustrate a tangible benefit in learning retrieval for tasks with diverse needs, supporting the document's assertion that non-parametric memory can enhance the task flexibility and performance of NLP models. The high statistics, such as RAG-Sequence achieving 44.0 in NQ and 57.2 in ROUGE-L, correlate with the findings suggesting that sophisticated retrieval mechanisms can significantly improve model output quality across varying backgrounds, affirming the innovative leap in retrieval-based architectures discussed throughout the document.",
    "tokens": 1072,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 25,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:f1e143efa4d76a4ac682629bf18f19bd",
      "default:extract:435ee41f53d52551774a9080cbe7b655"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Model Performance Comparison Table for RAG-based Architectures (table)",
    "original_type": "table",
    "page_idx": 7,
    "create_time": 1757866396,
    "update_time": 1757866455,
    "_id": "chunk-0dc5f0a2ca0f99aef13c5f054b56fd98"
  },
  "chunk-4987aa3e480b586e707cdca6ecf793c5": {
    "content": "\nImage Content Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/0f80f5e44c9e47f71b045629279e27551dfcf711448b6aa0524be40d6dba70de.jpg\nCaptions: None\nFootnotes: None\n\nVisual Analysis: The image consists of three separate line graphs displayed horizontally, each representing different performance metrics of retrieval-based models across varying numbers of retrieved documents (K). All graphs have the same x-axis labeled 'K Retrieved Docs', indicating the number of documents retrieved, ranging typically from 0 to 50. The first graph on the left is titled 'NQ Exact Match' and features two main data lines: one in solid orange representing 'RAG-Tok' and one in dashed teal for 'RAG-Seq'. Both lines start high near the y-axis top and show performance leveling out past 10 documents, with the orange line slightly declining while the teal stays steady. The second middle graph measures 'NQ Answer Recall @K', plotting both 'RAG-Tok' and 'RAG-Seq' in solid orange and dashed teal, respectively, along with additional data points for 'Fixed DPR' (in turquoise) and 'BM25' (in dotted purple). The graphs exhibit recall performance that increases steeply and then plateaus, with 'BM25' performing less strongly compared to other methods. The third graph on the right shows 'Bleu-1 / Rouge-L score', with two orange lines (solid for Rouge-L, long-dashed for Bleu-1) and two teal lines (dashed for Rouge-L and densely dashed for Bleu-1). Here, Bleu-1 scores tend to decrease slightly with more documents, while Rouge-L remains steady, reflecting stability in response quality with increasing K. Overall, both 'RAG-Tok' and 'RAG-Seq' are tracked across all graphs, maintaining readability with distinct coloring and line styles. Background and graph frame are minimalist, emphasizing data clarity.",
    "tokens": 439,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 26,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:59f0db81a7881fd7f965d73a2d2dc4ec",
      "default:extract:27785910c39d24c1af8679e8c79ac8dc"
    ],
    "is_multimodal": true,
    "modal_entity_name": "RAG Performance Metrics Image (image)",
    "original_type": "image",
    "page_idx": 7,
    "create_time": 1757866396,
    "update_time": 1757866467,
    "_id": "chunk-4987aa3e480b586e707cdca6ecf793c5"
  },
  "chunk-497ebdf7aed01bdfbf8a90a7f8a88d97": {
    "content": "\nImage Content Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/8343ed771bf828519ab29f8eda928f16083e95647be601d58fad82ac0ea06188.jpg\nCaptions: None\nFootnotes: None\n\nVisual Analysis: The image shows a section of an online user interface for human evaluation. The interface is centered around fact-checking by comparing the factual accuracy of two given sentences about a subject. At the top of the interface is a prompt that reads: 'Which sentence is more factually true?' Below this prompt, the subject 'Hemingway' is written, followed by two sentences for comparison. Sentence A states: '\"The Sun Also Rises\" is a novel by this author of \"A Farewell to Arms\".' Sentence B claims: 'This author of \"The Sun Also Rises\" was born in Havana, Cuba, the son of Spanish immigrants.' Beside the sentences, on the right side, there are multiple choice options numbered from 1 to 4, offering: 'Sentence A is more true', 'Sentence B is more true', 'Both sentences are true', and 'Both sentences are completely untrue'. On the far left, there is additional instructional text in two colors. Blue text offers links to 'View full instructions' and 'View tool guide'. Below this, red text indicates: 'Note: Some questions are control questions. We require good accuracy on our control questions to accept responses.' Black text advises: 'Indicate which one of the following sentences is more factually true with respect to the subject. Using the internet to check whether the sentences are true is encouraged.' The layout is clean and structured for ease of navigation. The visual style is minimalistic, predominantly using black text on a white background, with strategic use of red and blue for emphasis. The context surrounding this interface suggests it is part of a controlled human evaluation study, possibly related to natural language processing tasks such as knowledge verification.",
    "tokens": 432,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 27,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:a6372e6fc755a405abb81e5ca6b18dd8",
      "default:extract:a42e0972d3215bec459b95bc7fe5b20d"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Hemingway Sentence Evaluation Interface (image)",
    "original_type": "image",
    "page_idx": 16,
    "create_time": 1757866396,
    "update_time": 1757866458,
    "_id": "chunk-497ebdf7aed01bdfbf8a90a7f8a88d97"
  },
  "chunk-fcc8a31ee693dbfc5b99acc3539c58ca": {
    "content": "Table Analysis:\nImage Path: /Users/gozachary/Downloads/Data-2/RAG-Anything/enhanced_efr_output/2005.11401v4/auto/images/a76726193ef0305a893380bf93063a80b6c4be0282a47833212fb1c94918468e.jpg\nCaption: Table 7: Number of instances in the datasets used. $^ { * } \\mathrm { A }$ hidden subset of this data is used for evaluation \nStructure: <table><tr><td>Task</td><td>Train</td><td>Development</td><td>Test</td></tr><tr><td>Natural Questions</td><td>79169</td><td>8758</td><td>3611</td></tr><tr><td>TriviaQA</td><td>78786</td><td>8838</td><td>11314</td></tr><tr><td>WebQuestions</td><td>3418</td><td>362</td><td>2033</td></tr><tr><td>CuratedTrec</td><td>635</td><td>134</td><td>635</td></tr><tr><td>Jeopardy Question Generation</td><td>97392</td><td>13714</td><td>26849</td></tr><tr><td>MS-MARCO</td><td>153726</td><td>12468</td><td>101093*</td></tr><tr><td>FEVER-3-way</td><td>145450</td><td>10000</td><td>10000</td></tr><tr><td>FEVER-2-way</td><td>96966</td><td>6666</td><td>6666</td></tr></table>\nFootnotes: None\n\nAnalysis: The table presents the number of instances across different datasets used for open-domain question answering (QA) tasks. It is structured with four columns: 'Task', 'Train', 'Development', and 'Test'. Each row represents a different dataset. The 'Train' column lists the number of training instances, the 'Development' column the instances used for validation, and the 'Test' column the number of instances used for testing. Key data points show that 'MS-MARCO' has the highest number of training instances (153726) and 'CuratedTrec' has the lowest (635), indicating varying dataset sizes and complexities. There's a pattern where datasets like 'TriviaQA' have more test instances (11314) than training (78786), suggesting a focus on robust evaluation. Statistical insights reveal that datasets with larger training sets, like 'Natural Questions' and 'FEVER-3-way', tend to feature more instances across all categories, hinting at the importance of substantial training data for model performance. The relationship of data elements emphasizes the necessity for diverse, large datasets in enhancing QA model training, aligning with the study's discussion on utilizing multiple answer annotations and filtering techniques to improve accuracy for RAG and other models. This data supports the surrounding content's focus on the significance of thorough dataset preparation and evaluation for optimizing open-domain QA systems.",
    "tokens": 686,
    "full_doc_id": "doc-35dab1a9670eaded36457f5dd92f5ad7",
    "chunk_order_index": 28,
    "file_path": "2005.11401v4.pdf",
    "llm_cache_list": [
      "default:extract:5aa9d32a5b84b5eeac1c93b6674b4cb0",
      "default:extract:20149aa4d21066cc3f9f2c6e8e32c5b9"
    ],
    "is_multimodal": true,
    "modal_entity_name": "Task Instance Counts for Open-Domain QA Datasets (table)",
    "original_type": "table",
    "page_idx": 18,
    "create_time": 1757866396,
    "update_time": 1757866465,
    "_id": "chunk-fcc8a31ee693dbfc5b99acc3539c58ca"
  }
}